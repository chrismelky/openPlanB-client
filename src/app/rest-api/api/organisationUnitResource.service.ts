/**
 * server API
 * server API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { OrganisationUnit } from '../model/organisationUnit';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class OrganisationUnitResourceService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createOrganisationUnit
     * 
     * @param organisationUnit organisationUnit
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOrganisationUnitUsingPOST(organisationUnit: OrganisationUnit, observe?: 'body', reportProgress?: boolean): Observable<OrganisationUnit>;
    public createOrganisationUnitUsingPOST(organisationUnit: OrganisationUnit, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganisationUnit>>;
    public createOrganisationUnitUsingPOST(organisationUnit: OrganisationUnit, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganisationUnit>>;
    public createOrganisationUnitUsingPOST(organisationUnit: OrganisationUnit, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organisationUnit === null || organisationUnit === undefined) {
            throw new Error('Required parameter organisationUnit was null or undefined when calling createOrganisationUnitUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<OrganisationUnit>(`${this.basePath}/api/organisation-units`,
            organisationUnit,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteOrganisationUnit
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganisationUnitUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteOrganisationUnitUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteOrganisationUnitUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteOrganisationUnitUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteOrganisationUnitUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/organisation-units/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllOrganisationUnits
     * 
     * @param addressContains 
     * @param addressEquals 
     * @param addressIn 
     * @param addressSpecified 
     * @param attributeValuesIdEquals 
     * @param attributeValuesIdGreaterOrEqualThan 
     * @param attributeValuesIdGreaterThan 
     * @param attributeValuesIdIn 
     * @param attributeValuesIdLessOrEqualThan 
     * @param attributeValuesIdLessThan 
     * @param attributeValuesIdSpecified 
     * @param closedDateEquals 
     * @param closedDateGreaterOrEqualThan 
     * @param closedDateGreaterThan 
     * @param closedDateIn0ChronologyCalendarType 
     * @param closedDateIn0ChronologyId 
     * @param closedDateIn0DayOfMonth 
     * @param closedDateIn0DayOfWeek 
     * @param closedDateIn0DayOfYear 
     * @param closedDateIn0EraValue 
     * @param closedDateIn0LeapYear 
     * @param closedDateIn0Month 
     * @param closedDateIn0MonthValue 
     * @param closedDateIn0Year 
     * @param closedDateLessOrEqualThan 
     * @param closedDateLessThan 
     * @param closedDateSpecified 
     * @param codeContains 
     * @param codeEquals 
     * @param codeIn 
     * @param codeSpecified 
     * @param emailContains 
     * @param emailEquals 
     * @param emailIn 
     * @param emailSpecified 
     * @param idEquals 
     * @param idGreaterOrEqualThan 
     * @param idGreaterThan 
     * @param idIn 
     * @param idLessOrEqualThan 
     * @param idLessThan 
     * @param idSpecified 
     * @param latitudeEquals 
     * @param latitudeGreaterOrEqualThan 
     * @param latitudeGreaterThan 
     * @param latitudeIn 
     * @param latitudeLessOrEqualThan 
     * @param latitudeLessThan 
     * @param latitudeSpecified 
     * @param longitudeEquals 
     * @param longitudeGreaterOrEqualThan 
     * @param longitudeGreaterThan 
     * @param longitudeIn 
     * @param longitudeLessOrEqualThan 
     * @param longitudeLessThan 
     * @param longitudeSpecified 
     * @param nameContains 
     * @param nameEquals 
     * @param nameIn 
     * @param nameSpecified 
     * @param offset 
     * @param openingDateEquals 
     * @param openingDateGreaterOrEqualThan 
     * @param openingDateGreaterThan 
     * @param openingDateIn0ChronologyCalendarType 
     * @param openingDateIn0ChronologyId 
     * @param openingDateIn0DayOfMonth 
     * @param openingDateIn0DayOfWeek 
     * @param openingDateIn0DayOfYear 
     * @param openingDateIn0EraValue 
     * @param openingDateIn0LeapYear 
     * @param openingDateIn0Month 
     * @param openingDateIn0MonthValue 
     * @param openingDateIn0Year 
     * @param openingDateLessOrEqualThan 
     * @param openingDateLessThan 
     * @param openingDateSpecified 
     * @param orgUnitGroupIdEquals 
     * @param orgUnitGroupIdGreaterOrEqualThan 
     * @param orgUnitGroupIdGreaterThan 
     * @param orgUnitGroupIdIn 
     * @param orgUnitGroupIdLessOrEqualThan 
     * @param orgUnitGroupIdLessThan 
     * @param orgUnitGroupIdSpecified 
     * @param page Page number of the requested page
     * @param pageNumber 
     * @param pageSize 
     * @param paged 
     * @param parentIdEquals 
     * @param parentIdGreaterOrEqualThan 
     * @param parentIdGreaterThan 
     * @param parentIdIn 
     * @param parentIdLessOrEqualThan 
     * @param parentIdLessThan 
     * @param parentIdSpecified 
     * @param phoneNumnerContains 
     * @param phoneNumnerEquals 
     * @param phoneNumnerIn 
     * @param phoneNumnerSpecified 
     * @param size Size of a page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param sortSorted 
     * @param sortUnsorted 
     * @param unpaged 
     * @param urlContains 
     * @param urlEquals 
     * @param urlIn 
     * @param urlSpecified 
     * @param uuidContains 
     * @param uuidEquals 
     * @param uuidIn 
     * @param uuidSpecified 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllOrganisationUnitsUsingGET(addressContains?: string, addressEquals?: string, addressIn?: Array<string>, addressSpecified?: boolean, attributeValuesIdEquals?: number, attributeValuesIdGreaterOrEqualThan?: number, attributeValuesIdGreaterThan?: number, attributeValuesIdIn?: Array<number>, attributeValuesIdLessOrEqualThan?: number, attributeValuesIdLessThan?: number, attributeValuesIdSpecified?: boolean, closedDateEquals?: string, closedDateGreaterOrEqualThan?: string, closedDateGreaterThan?: string, closedDateIn0ChronologyCalendarType?: string, closedDateIn0ChronologyId?: string, closedDateIn0DayOfMonth?: number, closedDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', closedDateIn0DayOfYear?: number, closedDateIn0EraValue?: number, closedDateIn0LeapYear?: boolean, closedDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', closedDateIn0MonthValue?: number, closedDateIn0Year?: number, closedDateLessOrEqualThan?: string, closedDateLessThan?: string, closedDateSpecified?: boolean, codeContains?: string, codeEquals?: string, codeIn?: Array<string>, codeSpecified?: boolean, emailContains?: string, emailEquals?: string, emailIn?: Array<string>, emailSpecified?: boolean, idEquals?: number, idGreaterOrEqualThan?: number, idGreaterThan?: number, idIn?: Array<number>, idLessOrEqualThan?: number, idLessThan?: number, idSpecified?: boolean, latitudeEquals?: number, latitudeGreaterOrEqualThan?: number, latitudeGreaterThan?: number, latitudeIn?: Array<number>, latitudeLessOrEqualThan?: number, latitudeLessThan?: number, latitudeSpecified?: boolean, longitudeEquals?: number, longitudeGreaterOrEqualThan?: number, longitudeGreaterThan?: number, longitudeIn?: Array<number>, longitudeLessOrEqualThan?: number, longitudeLessThan?: number, longitudeSpecified?: boolean, nameContains?: string, nameEquals?: string, nameIn?: Array<string>, nameSpecified?: boolean, offset?: number, openingDateEquals?: string, openingDateGreaterOrEqualThan?: string, openingDateGreaterThan?: string, openingDateIn0ChronologyCalendarType?: string, openingDateIn0ChronologyId?: string, openingDateIn0DayOfMonth?: number, openingDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', openingDateIn0DayOfYear?: number, openingDateIn0EraValue?: number, openingDateIn0LeapYear?: boolean, openingDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', openingDateIn0MonthValue?: number, openingDateIn0Year?: number, openingDateLessOrEqualThan?: string, openingDateLessThan?: string, openingDateSpecified?: boolean, orgUnitGroupIdEquals?: number, orgUnitGroupIdGreaterOrEqualThan?: number, orgUnitGroupIdGreaterThan?: number, orgUnitGroupIdIn?: Array<number>, orgUnitGroupIdLessOrEqualThan?: number, orgUnitGroupIdLessThan?: number, orgUnitGroupIdSpecified?: boolean, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, parentIdEquals?: number, parentIdGreaterOrEqualThan?: number, parentIdGreaterThan?: number, parentIdIn?: Array<number>, parentIdLessOrEqualThan?: number, parentIdLessThan?: number, parentIdSpecified?: boolean, phoneNumnerContains?: string, phoneNumnerEquals?: string, phoneNumnerIn?: Array<string>, phoneNumnerSpecified?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, urlContains?: string, urlEquals?: string, urlIn?: Array<string>, urlSpecified?: boolean, uuidContains?: string, uuidEquals?: string, uuidIn?: Array<string>, uuidSpecified?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<OrganisationUnit>>;
    public getAllOrganisationUnitsUsingGET(addressContains?: string, addressEquals?: string, addressIn?: Array<string>, addressSpecified?: boolean, attributeValuesIdEquals?: number, attributeValuesIdGreaterOrEqualThan?: number, attributeValuesIdGreaterThan?: number, attributeValuesIdIn?: Array<number>, attributeValuesIdLessOrEqualThan?: number, attributeValuesIdLessThan?: number, attributeValuesIdSpecified?: boolean, closedDateEquals?: string, closedDateGreaterOrEqualThan?: string, closedDateGreaterThan?: string, closedDateIn0ChronologyCalendarType?: string, closedDateIn0ChronologyId?: string, closedDateIn0DayOfMonth?: number, closedDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', closedDateIn0DayOfYear?: number, closedDateIn0EraValue?: number, closedDateIn0LeapYear?: boolean, closedDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', closedDateIn0MonthValue?: number, closedDateIn0Year?: number, closedDateLessOrEqualThan?: string, closedDateLessThan?: string, closedDateSpecified?: boolean, codeContains?: string, codeEquals?: string, codeIn?: Array<string>, codeSpecified?: boolean, emailContains?: string, emailEquals?: string, emailIn?: Array<string>, emailSpecified?: boolean, idEquals?: number, idGreaterOrEqualThan?: number, idGreaterThan?: number, idIn?: Array<number>, idLessOrEqualThan?: number, idLessThan?: number, idSpecified?: boolean, latitudeEquals?: number, latitudeGreaterOrEqualThan?: number, latitudeGreaterThan?: number, latitudeIn?: Array<number>, latitudeLessOrEqualThan?: number, latitudeLessThan?: number, latitudeSpecified?: boolean, longitudeEquals?: number, longitudeGreaterOrEqualThan?: number, longitudeGreaterThan?: number, longitudeIn?: Array<number>, longitudeLessOrEqualThan?: number, longitudeLessThan?: number, longitudeSpecified?: boolean, nameContains?: string, nameEquals?: string, nameIn?: Array<string>, nameSpecified?: boolean, offset?: number, openingDateEquals?: string, openingDateGreaterOrEqualThan?: string, openingDateGreaterThan?: string, openingDateIn0ChronologyCalendarType?: string, openingDateIn0ChronologyId?: string, openingDateIn0DayOfMonth?: number, openingDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', openingDateIn0DayOfYear?: number, openingDateIn0EraValue?: number, openingDateIn0LeapYear?: boolean, openingDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', openingDateIn0MonthValue?: number, openingDateIn0Year?: number, openingDateLessOrEqualThan?: string, openingDateLessThan?: string, openingDateSpecified?: boolean, orgUnitGroupIdEquals?: number, orgUnitGroupIdGreaterOrEqualThan?: number, orgUnitGroupIdGreaterThan?: number, orgUnitGroupIdIn?: Array<number>, orgUnitGroupIdLessOrEqualThan?: number, orgUnitGroupIdLessThan?: number, orgUnitGroupIdSpecified?: boolean, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, parentIdEquals?: number, parentIdGreaterOrEqualThan?: number, parentIdGreaterThan?: number, parentIdIn?: Array<number>, parentIdLessOrEqualThan?: number, parentIdLessThan?: number, parentIdSpecified?: boolean, phoneNumnerContains?: string, phoneNumnerEquals?: string, phoneNumnerIn?: Array<string>, phoneNumnerSpecified?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, urlContains?: string, urlEquals?: string, urlIn?: Array<string>, urlSpecified?: boolean, uuidContains?: string, uuidEquals?: string, uuidIn?: Array<string>, uuidSpecified?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrganisationUnit>>>;
    public getAllOrganisationUnitsUsingGET(addressContains?: string, addressEquals?: string, addressIn?: Array<string>, addressSpecified?: boolean, attributeValuesIdEquals?: number, attributeValuesIdGreaterOrEqualThan?: number, attributeValuesIdGreaterThan?: number, attributeValuesIdIn?: Array<number>, attributeValuesIdLessOrEqualThan?: number, attributeValuesIdLessThan?: number, attributeValuesIdSpecified?: boolean, closedDateEquals?: string, closedDateGreaterOrEqualThan?: string, closedDateGreaterThan?: string, closedDateIn0ChronologyCalendarType?: string, closedDateIn0ChronologyId?: string, closedDateIn0DayOfMonth?: number, closedDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', closedDateIn0DayOfYear?: number, closedDateIn0EraValue?: number, closedDateIn0LeapYear?: boolean, closedDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', closedDateIn0MonthValue?: number, closedDateIn0Year?: number, closedDateLessOrEqualThan?: string, closedDateLessThan?: string, closedDateSpecified?: boolean, codeContains?: string, codeEquals?: string, codeIn?: Array<string>, codeSpecified?: boolean, emailContains?: string, emailEquals?: string, emailIn?: Array<string>, emailSpecified?: boolean, idEquals?: number, idGreaterOrEqualThan?: number, idGreaterThan?: number, idIn?: Array<number>, idLessOrEqualThan?: number, idLessThan?: number, idSpecified?: boolean, latitudeEquals?: number, latitudeGreaterOrEqualThan?: number, latitudeGreaterThan?: number, latitudeIn?: Array<number>, latitudeLessOrEqualThan?: number, latitudeLessThan?: number, latitudeSpecified?: boolean, longitudeEquals?: number, longitudeGreaterOrEqualThan?: number, longitudeGreaterThan?: number, longitudeIn?: Array<number>, longitudeLessOrEqualThan?: number, longitudeLessThan?: number, longitudeSpecified?: boolean, nameContains?: string, nameEquals?: string, nameIn?: Array<string>, nameSpecified?: boolean, offset?: number, openingDateEquals?: string, openingDateGreaterOrEqualThan?: string, openingDateGreaterThan?: string, openingDateIn0ChronologyCalendarType?: string, openingDateIn0ChronologyId?: string, openingDateIn0DayOfMonth?: number, openingDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', openingDateIn0DayOfYear?: number, openingDateIn0EraValue?: number, openingDateIn0LeapYear?: boolean, openingDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', openingDateIn0MonthValue?: number, openingDateIn0Year?: number, openingDateLessOrEqualThan?: string, openingDateLessThan?: string, openingDateSpecified?: boolean, orgUnitGroupIdEquals?: number, orgUnitGroupIdGreaterOrEqualThan?: number, orgUnitGroupIdGreaterThan?: number, orgUnitGroupIdIn?: Array<number>, orgUnitGroupIdLessOrEqualThan?: number, orgUnitGroupIdLessThan?: number, orgUnitGroupIdSpecified?: boolean, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, parentIdEquals?: number, parentIdGreaterOrEqualThan?: number, parentIdGreaterThan?: number, parentIdIn?: Array<number>, parentIdLessOrEqualThan?: number, parentIdLessThan?: number, parentIdSpecified?: boolean, phoneNumnerContains?: string, phoneNumnerEquals?: string, phoneNumnerIn?: Array<string>, phoneNumnerSpecified?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, urlContains?: string, urlEquals?: string, urlIn?: Array<string>, urlSpecified?: boolean, uuidContains?: string, uuidEquals?: string, uuidIn?: Array<string>, uuidSpecified?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrganisationUnit>>>;
    public getAllOrganisationUnitsUsingGET(addressContains?: string, addressEquals?: string, addressIn?: Array<string>, addressSpecified?: boolean, attributeValuesIdEquals?: number, attributeValuesIdGreaterOrEqualThan?: number, attributeValuesIdGreaterThan?: number, attributeValuesIdIn?: Array<number>, attributeValuesIdLessOrEqualThan?: number, attributeValuesIdLessThan?: number, attributeValuesIdSpecified?: boolean, closedDateEquals?: string, closedDateGreaterOrEqualThan?: string, closedDateGreaterThan?: string, closedDateIn0ChronologyCalendarType?: string, closedDateIn0ChronologyId?: string, closedDateIn0DayOfMonth?: number, closedDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', closedDateIn0DayOfYear?: number, closedDateIn0EraValue?: number, closedDateIn0LeapYear?: boolean, closedDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', closedDateIn0MonthValue?: number, closedDateIn0Year?: number, closedDateLessOrEqualThan?: string, closedDateLessThan?: string, closedDateSpecified?: boolean, codeContains?: string, codeEquals?: string, codeIn?: Array<string>, codeSpecified?: boolean, emailContains?: string, emailEquals?: string, emailIn?: Array<string>, emailSpecified?: boolean, idEquals?: number, idGreaterOrEqualThan?: number, idGreaterThan?: number, idIn?: Array<number>, idLessOrEqualThan?: number, idLessThan?: number, idSpecified?: boolean, latitudeEquals?: number, latitudeGreaterOrEqualThan?: number, latitudeGreaterThan?: number, latitudeIn?: Array<number>, latitudeLessOrEqualThan?: number, latitudeLessThan?: number, latitudeSpecified?: boolean, longitudeEquals?: number, longitudeGreaterOrEqualThan?: number, longitudeGreaterThan?: number, longitudeIn?: Array<number>, longitudeLessOrEqualThan?: number, longitudeLessThan?: number, longitudeSpecified?: boolean, nameContains?: string, nameEquals?: string, nameIn?: Array<string>, nameSpecified?: boolean, offset?: number, openingDateEquals?: string, openingDateGreaterOrEqualThan?: string, openingDateGreaterThan?: string, openingDateIn0ChronologyCalendarType?: string, openingDateIn0ChronologyId?: string, openingDateIn0DayOfMonth?: number, openingDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', openingDateIn0DayOfYear?: number, openingDateIn0EraValue?: number, openingDateIn0LeapYear?: boolean, openingDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', openingDateIn0MonthValue?: number, openingDateIn0Year?: number, openingDateLessOrEqualThan?: string, openingDateLessThan?: string, openingDateSpecified?: boolean, orgUnitGroupIdEquals?: number, orgUnitGroupIdGreaterOrEqualThan?: number, orgUnitGroupIdGreaterThan?: number, orgUnitGroupIdIn?: Array<number>, orgUnitGroupIdLessOrEqualThan?: number, orgUnitGroupIdLessThan?: number, orgUnitGroupIdSpecified?: boolean, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, parentIdEquals?: number, parentIdGreaterOrEqualThan?: number, parentIdGreaterThan?: number, parentIdIn?: Array<number>, parentIdLessOrEqualThan?: number, parentIdLessThan?: number, parentIdSpecified?: boolean, phoneNumnerContains?: string, phoneNumnerEquals?: string, phoneNumnerIn?: Array<string>, phoneNumnerSpecified?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, unpaged?: boolean, urlContains?: string, urlEquals?: string, urlIn?: Array<string>, urlSpecified?: boolean, uuidContains?: string, uuidEquals?: string, uuidIn?: Array<string>, uuidSpecified?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

















































































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (addressContains !== undefined && addressContains !== null) {
            queryParameters = queryParameters.set('address.contains', <any>addressContains);
        }
        if (addressEquals !== undefined && addressEquals !== null) {
            queryParameters = queryParameters.set('address.equals', <any>addressEquals);
        }
        if (addressIn) {
            addressIn.forEach((element) => {
                queryParameters = queryParameters.append('address.in', <any>element);
            })
        }
        if (addressSpecified !== undefined && addressSpecified !== null) {
            queryParameters = queryParameters.set('address.specified', <any>addressSpecified);
        }
        if (attributeValuesIdEquals !== undefined && attributeValuesIdEquals !== null) {
            queryParameters = queryParameters.set('attributeValuesId.equals', <any>attributeValuesIdEquals);
        }
        if (attributeValuesIdGreaterOrEqualThan !== undefined && attributeValuesIdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.greaterOrEqualThan', <any>attributeValuesIdGreaterOrEqualThan);
        }
        if (attributeValuesIdGreaterThan !== undefined && attributeValuesIdGreaterThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.greaterThan', <any>attributeValuesIdGreaterThan);
        }
        if (attributeValuesIdIn) {
            attributeValuesIdIn.forEach((element) => {
                queryParameters = queryParameters.append('attributeValuesId.in', <any>element);
            })
        }
        if (attributeValuesIdLessOrEqualThan !== undefined && attributeValuesIdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.lessOrEqualThan', <any>attributeValuesIdLessOrEqualThan);
        }
        if (attributeValuesIdLessThan !== undefined && attributeValuesIdLessThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.lessThan', <any>attributeValuesIdLessThan);
        }
        if (attributeValuesIdSpecified !== undefined && attributeValuesIdSpecified !== null) {
            queryParameters = queryParameters.set('attributeValuesId.specified', <any>attributeValuesIdSpecified);
        }
        if (closedDateEquals !== undefined && closedDateEquals !== null) {
            queryParameters = queryParameters.set('closedDate.equals', <any>closedDateEquals);
        }
        if (closedDateGreaterOrEqualThan !== undefined && closedDateGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('closedDate.greaterOrEqualThan', <any>closedDateGreaterOrEqualThan);
        }
        if (closedDateGreaterThan !== undefined && closedDateGreaterThan !== null) {
            queryParameters = queryParameters.set('closedDate.greaterThan', <any>closedDateGreaterThan);
        }
        if (closedDateIn0ChronologyCalendarType !== undefined && closedDateIn0ChronologyCalendarType !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].chronology.calendarType', <any>closedDateIn0ChronologyCalendarType);
        }
        if (closedDateIn0ChronologyId !== undefined && closedDateIn0ChronologyId !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].chronology.id', <any>closedDateIn0ChronologyId);
        }
        if (closedDateIn0DayOfMonth !== undefined && closedDateIn0DayOfMonth !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].dayOfMonth', <any>closedDateIn0DayOfMonth);
        }
        if (closedDateIn0DayOfWeek !== undefined && closedDateIn0DayOfWeek !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].dayOfWeek', <any>closedDateIn0DayOfWeek);
        }
        if (closedDateIn0DayOfYear !== undefined && closedDateIn0DayOfYear !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].dayOfYear', <any>closedDateIn0DayOfYear);
        }
        if (closedDateIn0EraValue !== undefined && closedDateIn0EraValue !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].era.value', <any>closedDateIn0EraValue);
        }
        if (closedDateIn0LeapYear !== undefined && closedDateIn0LeapYear !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].leapYear', <any>closedDateIn0LeapYear);
        }
        if (closedDateIn0Month !== undefined && closedDateIn0Month !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].month', <any>closedDateIn0Month);
        }
        if (closedDateIn0MonthValue !== undefined && closedDateIn0MonthValue !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].monthValue', <any>closedDateIn0MonthValue);
        }
        if (closedDateIn0Year !== undefined && closedDateIn0Year !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].year', <any>closedDateIn0Year);
        }
        if (closedDateLessOrEqualThan !== undefined && closedDateLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('closedDate.lessOrEqualThan', <any>closedDateLessOrEqualThan);
        }
        if (closedDateLessThan !== undefined && closedDateLessThan !== null) {
            queryParameters = queryParameters.set('closedDate.lessThan', <any>closedDateLessThan);
        }
        if (closedDateSpecified !== undefined && closedDateSpecified !== null) {
            queryParameters = queryParameters.set('closedDate.specified', <any>closedDateSpecified);
        }
        if (codeContains !== undefined && codeContains !== null) {
            queryParameters = queryParameters.set('code.contains', <any>codeContains);
        }
        if (codeEquals !== undefined && codeEquals !== null) {
            queryParameters = queryParameters.set('code.equals', <any>codeEquals);
        }
        if (codeIn) {
            codeIn.forEach((element) => {
                queryParameters = queryParameters.append('code.in', <any>element);
            })
        }
        if (codeSpecified !== undefined && codeSpecified !== null) {
            queryParameters = queryParameters.set('code.specified', <any>codeSpecified);
        }
        if (emailContains !== undefined && emailContains !== null) {
            queryParameters = queryParameters.set('email.contains', <any>emailContains);
        }
        if (emailEquals !== undefined && emailEquals !== null) {
            queryParameters = queryParameters.set('email.equals', <any>emailEquals);
        }
        if (emailIn) {
            emailIn.forEach((element) => {
                queryParameters = queryParameters.append('email.in', <any>element);
            })
        }
        if (emailSpecified !== undefined && emailSpecified !== null) {
            queryParameters = queryParameters.set('email.specified', <any>emailSpecified);
        }
        if (idEquals !== undefined && idEquals !== null) {
            queryParameters = queryParameters.set('id.equals', <any>idEquals);
        }
        if (idGreaterOrEqualThan !== undefined && idGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('id.greaterOrEqualThan', <any>idGreaterOrEqualThan);
        }
        if (idGreaterThan !== undefined && idGreaterThan !== null) {
            queryParameters = queryParameters.set('id.greaterThan', <any>idGreaterThan);
        }
        if (idIn) {
            idIn.forEach((element) => {
                queryParameters = queryParameters.append('id.in', <any>element);
            })
        }
        if (idLessOrEqualThan !== undefined && idLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('id.lessOrEqualThan', <any>idLessOrEqualThan);
        }
        if (idLessThan !== undefined && idLessThan !== null) {
            queryParameters = queryParameters.set('id.lessThan', <any>idLessThan);
        }
        if (idSpecified !== undefined && idSpecified !== null) {
            queryParameters = queryParameters.set('id.specified', <any>idSpecified);
        }
        if (latitudeEquals !== undefined && latitudeEquals !== null) {
            queryParameters = queryParameters.set('latitude.equals', <any>latitudeEquals);
        }
        if (latitudeGreaterOrEqualThan !== undefined && latitudeGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('latitude.greaterOrEqualThan', <any>latitudeGreaterOrEqualThan);
        }
        if (latitudeGreaterThan !== undefined && latitudeGreaterThan !== null) {
            queryParameters = queryParameters.set('latitude.greaterThan', <any>latitudeGreaterThan);
        }
        if (latitudeIn) {
            latitudeIn.forEach((element) => {
                queryParameters = queryParameters.append('latitude.in', <any>element);
            })
        }
        if (latitudeLessOrEqualThan !== undefined && latitudeLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('latitude.lessOrEqualThan', <any>latitudeLessOrEqualThan);
        }
        if (latitudeLessThan !== undefined && latitudeLessThan !== null) {
            queryParameters = queryParameters.set('latitude.lessThan', <any>latitudeLessThan);
        }
        if (latitudeSpecified !== undefined && latitudeSpecified !== null) {
            queryParameters = queryParameters.set('latitude.specified', <any>latitudeSpecified);
        }
        if (longitudeEquals !== undefined && longitudeEquals !== null) {
            queryParameters = queryParameters.set('longitude.equals', <any>longitudeEquals);
        }
        if (longitudeGreaterOrEqualThan !== undefined && longitudeGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('longitude.greaterOrEqualThan', <any>longitudeGreaterOrEqualThan);
        }
        if (longitudeGreaterThan !== undefined && longitudeGreaterThan !== null) {
            queryParameters = queryParameters.set('longitude.greaterThan', <any>longitudeGreaterThan);
        }
        if (longitudeIn) {
            longitudeIn.forEach((element) => {
                queryParameters = queryParameters.append('longitude.in', <any>element);
            })
        }
        if (longitudeLessOrEqualThan !== undefined && longitudeLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('longitude.lessOrEqualThan', <any>longitudeLessOrEqualThan);
        }
        if (longitudeLessThan !== undefined && longitudeLessThan !== null) {
            queryParameters = queryParameters.set('longitude.lessThan', <any>longitudeLessThan);
        }
        if (longitudeSpecified !== undefined && longitudeSpecified !== null) {
            queryParameters = queryParameters.set('longitude.specified', <any>longitudeSpecified);
        }
        if (nameContains !== undefined && nameContains !== null) {
            queryParameters = queryParameters.set('name.contains', <any>nameContains);
        }
        if (nameEquals !== undefined && nameEquals !== null) {
            queryParameters = queryParameters.set('name.equals', <any>nameEquals);
        }
        if (nameIn) {
            nameIn.forEach((element) => {
                queryParameters = queryParameters.append('name.in', <any>element);
            })
        }
        if (nameSpecified !== undefined && nameSpecified !== null) {
            queryParameters = queryParameters.set('name.specified', <any>nameSpecified);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (openingDateEquals !== undefined && openingDateEquals !== null) {
            queryParameters = queryParameters.set('openingDate.equals', <any>openingDateEquals);
        }
        if (openingDateGreaterOrEqualThan !== undefined && openingDateGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('openingDate.greaterOrEqualThan', <any>openingDateGreaterOrEqualThan);
        }
        if (openingDateGreaterThan !== undefined && openingDateGreaterThan !== null) {
            queryParameters = queryParameters.set('openingDate.greaterThan', <any>openingDateGreaterThan);
        }
        if (openingDateIn0ChronologyCalendarType !== undefined && openingDateIn0ChronologyCalendarType !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].chronology.calendarType', <any>openingDateIn0ChronologyCalendarType);
        }
        if (openingDateIn0ChronologyId !== undefined && openingDateIn0ChronologyId !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].chronology.id', <any>openingDateIn0ChronologyId);
        }
        if (openingDateIn0DayOfMonth !== undefined && openingDateIn0DayOfMonth !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].dayOfMonth', <any>openingDateIn0DayOfMonth);
        }
        if (openingDateIn0DayOfWeek !== undefined && openingDateIn0DayOfWeek !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].dayOfWeek', <any>openingDateIn0DayOfWeek);
        }
        if (openingDateIn0DayOfYear !== undefined && openingDateIn0DayOfYear !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].dayOfYear', <any>openingDateIn0DayOfYear);
        }
        if (openingDateIn0EraValue !== undefined && openingDateIn0EraValue !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].era.value', <any>openingDateIn0EraValue);
        }
        if (openingDateIn0LeapYear !== undefined && openingDateIn0LeapYear !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].leapYear', <any>openingDateIn0LeapYear);
        }
        if (openingDateIn0Month !== undefined && openingDateIn0Month !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].month', <any>openingDateIn0Month);
        }
        if (openingDateIn0MonthValue !== undefined && openingDateIn0MonthValue !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].monthValue', <any>openingDateIn0MonthValue);
        }
        if (openingDateIn0Year !== undefined && openingDateIn0Year !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].year', <any>openingDateIn0Year);
        }
        if (openingDateLessOrEqualThan !== undefined && openingDateLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('openingDate.lessOrEqualThan', <any>openingDateLessOrEqualThan);
        }
        if (openingDateLessThan !== undefined && openingDateLessThan !== null) {
            queryParameters = queryParameters.set('openingDate.lessThan', <any>openingDateLessThan);
        }
        if (openingDateSpecified !== undefined && openingDateSpecified !== null) {
            queryParameters = queryParameters.set('openingDate.specified', <any>openingDateSpecified);
        }
        if (orgUnitGroupIdEquals !== undefined && orgUnitGroupIdEquals !== null) {
            queryParameters = queryParameters.set('orgUnitGroupId.equals', <any>orgUnitGroupIdEquals);
        }
        if (orgUnitGroupIdGreaterOrEqualThan !== undefined && orgUnitGroupIdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupId.greaterOrEqualThan', <any>orgUnitGroupIdGreaterOrEqualThan);
        }
        if (orgUnitGroupIdGreaterThan !== undefined && orgUnitGroupIdGreaterThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupId.greaterThan', <any>orgUnitGroupIdGreaterThan);
        }
        if (orgUnitGroupIdIn) {
            orgUnitGroupIdIn.forEach((element) => {
                queryParameters = queryParameters.append('orgUnitGroupId.in', <any>element);
            })
        }
        if (orgUnitGroupIdLessOrEqualThan !== undefined && orgUnitGroupIdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupId.lessOrEqualThan', <any>orgUnitGroupIdLessOrEqualThan);
        }
        if (orgUnitGroupIdLessThan !== undefined && orgUnitGroupIdLessThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupId.lessThan', <any>orgUnitGroupIdLessThan);
        }
        if (orgUnitGroupIdSpecified !== undefined && orgUnitGroupIdSpecified !== null) {
            queryParameters = queryParameters.set('orgUnitGroupId.specified', <any>orgUnitGroupIdSpecified);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (paged !== undefined && paged !== null) {
            queryParameters = queryParameters.set('paged', <any>paged);
        }
        if (parentIdEquals !== undefined && parentIdEquals !== null) {
            queryParameters = queryParameters.set('parentId.equals', <any>parentIdEquals);
        }
        if (parentIdGreaterOrEqualThan !== undefined && parentIdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('parentId.greaterOrEqualThan', <any>parentIdGreaterOrEqualThan);
        }
        if (parentIdGreaterThan !== undefined && parentIdGreaterThan !== null) {
            queryParameters = queryParameters.set('parentId.greaterThan', <any>parentIdGreaterThan);
        }
        if (parentIdIn) {
            parentIdIn.forEach((element) => {
                queryParameters = queryParameters.append('parentId.in', <any>element);
            })
        }
        if (parentIdLessOrEqualThan !== undefined && parentIdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('parentId.lessOrEqualThan', <any>parentIdLessOrEqualThan);
        }
        if (parentIdLessThan !== undefined && parentIdLessThan !== null) {
            queryParameters = queryParameters.set('parentId.lessThan', <any>parentIdLessThan);
        }
        if (parentIdSpecified !== undefined && parentIdSpecified !== null) {
            queryParameters = queryParameters.set('parentId.specified', <any>parentIdSpecified);
        }
        if (phoneNumnerContains !== undefined && phoneNumnerContains !== null) {
            queryParameters = queryParameters.set('phoneNumner.contains', <any>phoneNumnerContains);
        }
        if (phoneNumnerEquals !== undefined && phoneNumnerEquals !== null) {
            queryParameters = queryParameters.set('phoneNumner.equals', <any>phoneNumnerEquals);
        }
        if (phoneNumnerIn) {
            phoneNumnerIn.forEach((element) => {
                queryParameters = queryParameters.append('phoneNumner.in', <any>element);
            })
        }
        if (phoneNumnerSpecified !== undefined && phoneNumnerSpecified !== null) {
            queryParameters = queryParameters.set('phoneNumner.specified', <any>phoneNumnerSpecified);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters = queryParameters.append('sort', <any>element);
            })
        }
        if (sortSorted !== undefined && sortSorted !== null) {
            queryParameters = queryParameters.set('sort.sorted', <any>sortSorted);
        }
        if (sortUnsorted !== undefined && sortUnsorted !== null) {
            queryParameters = queryParameters.set('sort.unsorted', <any>sortUnsorted);
        }
        if (unpaged !== undefined && unpaged !== null) {
            queryParameters = queryParameters.set('unpaged', <any>unpaged);
        }
        if (urlContains !== undefined && urlContains !== null) {
            queryParameters = queryParameters.set('url.contains', <any>urlContains);
        }
        if (urlEquals !== undefined && urlEquals !== null) {
            queryParameters = queryParameters.set('url.equals', <any>urlEquals);
        }
        if (urlIn) {
            urlIn.forEach((element) => {
                queryParameters = queryParameters.append('url.in', <any>element);
            })
        }
        if (urlSpecified !== undefined && urlSpecified !== null) {
            queryParameters = queryParameters.set('url.specified', <any>urlSpecified);
        }
        if (uuidContains !== undefined && uuidContains !== null) {
            queryParameters = queryParameters.set('uuid.contains', <any>uuidContains);
        }
        if (uuidEquals !== undefined && uuidEquals !== null) {
            queryParameters = queryParameters.set('uuid.equals', <any>uuidEquals);
        }
        if (uuidIn) {
            uuidIn.forEach((element) => {
                queryParameters = queryParameters.append('uuid.in', <any>element);
            })
        }
        if (uuidSpecified !== undefined && uuidSpecified !== null) {
            queryParameters = queryParameters.set('uuid.specified', <any>uuidSpecified);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OrganisationUnit>>(`${this.basePath}/api/organisation-units`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getOrganisationUnit
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrganisationUnitUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<OrganisationUnit>;
    public getOrganisationUnitUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganisationUnit>>;
    public getOrganisationUnitUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganisationUnit>>;
    public getOrganisationUnitUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getOrganisationUnitUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<OrganisationUnit>(`${this.basePath}/api/organisation-units/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateOrganisationUnit
     * 
     * @param organisationUnit organisationUnit
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateOrganisationUnitUsingPUT(organisationUnit: OrganisationUnit, observe?: 'body', reportProgress?: boolean): Observable<OrganisationUnit>;
    public updateOrganisationUnitUsingPUT(organisationUnit: OrganisationUnit, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganisationUnit>>;
    public updateOrganisationUnitUsingPUT(organisationUnit: OrganisationUnit, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganisationUnit>>;
    public updateOrganisationUnitUsingPUT(organisationUnit: OrganisationUnit, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (organisationUnit === null || organisationUnit === undefined) {
            throw new Error('Required parameter organisationUnit was null or undefined when calling updateOrganisationUnitUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<OrganisationUnit>(`${this.basePath}/api/organisation-units`,
            organisationUnit,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

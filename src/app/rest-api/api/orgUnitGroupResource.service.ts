/**
 * server API
 * server API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { OrgUnitGroup } from '../model/orgUnitGroup';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class OrgUnitGroupResourceService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createOrgUnitGroup
     * 
     * @param orgUnitGroup orgUnitGroup
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOrgUnitGroupUsingPOST(orgUnitGroup: OrgUnitGroup, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitGroup>;
    public createOrgUnitGroupUsingPOST(orgUnitGroup: OrgUnitGroup, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitGroup>>;
    public createOrgUnitGroupUsingPOST(orgUnitGroup: OrgUnitGroup, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitGroup>>;
    public createOrgUnitGroupUsingPOST(orgUnitGroup: OrgUnitGroup, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orgUnitGroup === null || orgUnitGroup === undefined) {
            throw new Error('Required parameter orgUnitGroup was null or undefined when calling createOrgUnitGroupUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<OrgUnitGroup>(`${this.basePath}/api/org-unit-groups`,
            orgUnitGroup,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteOrgUnitGroup
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrgUnitGroupUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteOrgUnitGroupUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteOrgUnitGroupUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteOrgUnitGroupUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteOrgUnitGroupUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/org-unit-groups/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllOrgUnitGroups
     * 
     * @param attributeValuesIdEquals 
     * @param attributeValuesIdGreaterOrEqualThan 
     * @param attributeValuesIdGreaterThan 
     * @param attributeValuesIdIn 
     * @param attributeValuesIdLessOrEqualThan 
     * @param attributeValuesIdLessThan 
     * @param attributeValuesIdSpecified 
     * @param codeContains 
     * @param codeEquals 
     * @param codeIn 
     * @param codeSpecified 
     * @param createdEquals 
     * @param createdGreaterOrEqualThan 
     * @param createdGreaterThan 
     * @param createdIn0EpochSecond 
     * @param createdIn0Nano 
     * @param createdLessOrEqualThan 
     * @param createdLessThan 
     * @param createdSpecified 
     * @param idEquals 
     * @param idGreaterOrEqualThan 
     * @param idGreaterThan 
     * @param idIn 
     * @param idLessOrEqualThan 
     * @param idLessThan 
     * @param idSpecified 
     * @param lastUpdateEquals 
     * @param lastUpdateGreaterOrEqualThan 
     * @param lastUpdateGreaterThan 
     * @param lastUpdateIn0EpochSecond 
     * @param lastUpdateIn0Nano 
     * @param lastUpdateLessOrEqualThan 
     * @param lastUpdateLessThan 
     * @param lastUpdateSpecified 
     * @param nameContains 
     * @param nameEquals 
     * @param nameIn 
     * @param nameSpecified 
     * @param offset 
     * @param orgUnitGroupSetIdEquals 
     * @param orgUnitGroupSetIdGreaterOrEqualThan 
     * @param orgUnitGroupSetIdGreaterThan 
     * @param orgUnitGroupSetIdIn 
     * @param orgUnitGroupSetIdLessOrEqualThan 
     * @param orgUnitGroupSetIdLessThan 
     * @param orgUnitGroupSetIdSpecified 
     * @param page Page number of the requested page
     * @param pageNumber 
     * @param pageSize 
     * @param paged 
     * @param size Size of a page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param sortSorted 
     * @param sortUnsorted 
     * @param uidContains 
     * @param uidEquals 
     * @param uidIn 
     * @param uidSpecified 
     * @param unpaged 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllOrgUnitGroupsUsingGET(attributeValuesIdEquals?: number, attributeValuesIdGreaterOrEqualThan?: number, attributeValuesIdGreaterThan?: number, attributeValuesIdIn?: Array<number>, attributeValuesIdLessOrEqualThan?: number, attributeValuesIdLessThan?: number, attributeValuesIdSpecified?: boolean, codeContains?: string, codeEquals?: string, codeIn?: Array<string>, codeSpecified?: boolean, createdEquals?: Date, createdGreaterOrEqualThan?: Date, createdGreaterThan?: Date, createdIn0EpochSecond?: number, createdIn0Nano?: number, createdLessOrEqualThan?: Date, createdLessThan?: Date, createdSpecified?: boolean, idEquals?: number, idGreaterOrEqualThan?: number, idGreaterThan?: number, idIn?: Array<number>, idLessOrEqualThan?: number, idLessThan?: number, idSpecified?: boolean, lastUpdateEquals?: Date, lastUpdateGreaterOrEqualThan?: Date, lastUpdateGreaterThan?: Date, lastUpdateIn0EpochSecond?: number, lastUpdateIn0Nano?: number, lastUpdateLessOrEqualThan?: Date, lastUpdateLessThan?: Date, lastUpdateSpecified?: boolean, nameContains?: string, nameEquals?: string, nameIn?: Array<string>, nameSpecified?: boolean, offset?: number, orgUnitGroupSetIdEquals?: number, orgUnitGroupSetIdGreaterOrEqualThan?: number, orgUnitGroupSetIdGreaterThan?: number, orgUnitGroupSetIdIn?: Array<number>, orgUnitGroupSetIdLessOrEqualThan?: number, orgUnitGroupSetIdLessThan?: number, orgUnitGroupSetIdSpecified?: boolean, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, uidContains?: string, uidEquals?: string, uidIn?: Array<string>, uidSpecified?: boolean, unpaged?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<OrgUnitGroup>>;
    public getAllOrgUnitGroupsUsingGET(attributeValuesIdEquals?: number, attributeValuesIdGreaterOrEqualThan?: number, attributeValuesIdGreaterThan?: number, attributeValuesIdIn?: Array<number>, attributeValuesIdLessOrEqualThan?: number, attributeValuesIdLessThan?: number, attributeValuesIdSpecified?: boolean, codeContains?: string, codeEquals?: string, codeIn?: Array<string>, codeSpecified?: boolean, createdEquals?: Date, createdGreaterOrEqualThan?: Date, createdGreaterThan?: Date, createdIn0EpochSecond?: number, createdIn0Nano?: number, createdLessOrEqualThan?: Date, createdLessThan?: Date, createdSpecified?: boolean, idEquals?: number, idGreaterOrEqualThan?: number, idGreaterThan?: number, idIn?: Array<number>, idLessOrEqualThan?: number, idLessThan?: number, idSpecified?: boolean, lastUpdateEquals?: Date, lastUpdateGreaterOrEqualThan?: Date, lastUpdateGreaterThan?: Date, lastUpdateIn0EpochSecond?: number, lastUpdateIn0Nano?: number, lastUpdateLessOrEqualThan?: Date, lastUpdateLessThan?: Date, lastUpdateSpecified?: boolean, nameContains?: string, nameEquals?: string, nameIn?: Array<string>, nameSpecified?: boolean, offset?: number, orgUnitGroupSetIdEquals?: number, orgUnitGroupSetIdGreaterOrEqualThan?: number, orgUnitGroupSetIdGreaterThan?: number, orgUnitGroupSetIdIn?: Array<number>, orgUnitGroupSetIdLessOrEqualThan?: number, orgUnitGroupSetIdLessThan?: number, orgUnitGroupSetIdSpecified?: boolean, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, uidContains?: string, uidEquals?: string, uidIn?: Array<string>, uidSpecified?: boolean, unpaged?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrgUnitGroup>>>;
    public getAllOrgUnitGroupsUsingGET(attributeValuesIdEquals?: number, attributeValuesIdGreaterOrEqualThan?: number, attributeValuesIdGreaterThan?: number, attributeValuesIdIn?: Array<number>, attributeValuesIdLessOrEqualThan?: number, attributeValuesIdLessThan?: number, attributeValuesIdSpecified?: boolean, codeContains?: string, codeEquals?: string, codeIn?: Array<string>, codeSpecified?: boolean, createdEquals?: Date, createdGreaterOrEqualThan?: Date, createdGreaterThan?: Date, createdIn0EpochSecond?: number, createdIn0Nano?: number, createdLessOrEqualThan?: Date, createdLessThan?: Date, createdSpecified?: boolean, idEquals?: number, idGreaterOrEqualThan?: number, idGreaterThan?: number, idIn?: Array<number>, idLessOrEqualThan?: number, idLessThan?: number, idSpecified?: boolean, lastUpdateEquals?: Date, lastUpdateGreaterOrEqualThan?: Date, lastUpdateGreaterThan?: Date, lastUpdateIn0EpochSecond?: number, lastUpdateIn0Nano?: number, lastUpdateLessOrEqualThan?: Date, lastUpdateLessThan?: Date, lastUpdateSpecified?: boolean, nameContains?: string, nameEquals?: string, nameIn?: Array<string>, nameSpecified?: boolean, offset?: number, orgUnitGroupSetIdEquals?: number, orgUnitGroupSetIdGreaterOrEqualThan?: number, orgUnitGroupSetIdGreaterThan?: number, orgUnitGroupSetIdIn?: Array<number>, orgUnitGroupSetIdLessOrEqualThan?: number, orgUnitGroupSetIdLessThan?: number, orgUnitGroupSetIdSpecified?: boolean, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, uidContains?: string, uidEquals?: string, uidIn?: Array<string>, uidSpecified?: boolean, unpaged?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrgUnitGroup>>>;
    public getAllOrgUnitGroupsUsingGET(attributeValuesIdEquals?: number, attributeValuesIdGreaterOrEqualThan?: number, attributeValuesIdGreaterThan?: number, attributeValuesIdIn?: Array<number>, attributeValuesIdLessOrEqualThan?: number, attributeValuesIdLessThan?: number, attributeValuesIdSpecified?: boolean, codeContains?: string, codeEquals?: string, codeIn?: Array<string>, codeSpecified?: boolean, createdEquals?: Date, createdGreaterOrEqualThan?: Date, createdGreaterThan?: Date, createdIn0EpochSecond?: number, createdIn0Nano?: number, createdLessOrEqualThan?: Date, createdLessThan?: Date, createdSpecified?: boolean, idEquals?: number, idGreaterOrEqualThan?: number, idGreaterThan?: number, idIn?: Array<number>, idLessOrEqualThan?: number, idLessThan?: number, idSpecified?: boolean, lastUpdateEquals?: Date, lastUpdateGreaterOrEqualThan?: Date, lastUpdateGreaterThan?: Date, lastUpdateIn0EpochSecond?: number, lastUpdateIn0Nano?: number, lastUpdateLessOrEqualThan?: Date, lastUpdateLessThan?: Date, lastUpdateSpecified?: boolean, nameContains?: string, nameEquals?: string, nameIn?: Array<string>, nameSpecified?: boolean, offset?: number, orgUnitGroupSetIdEquals?: number, orgUnitGroupSetIdGreaterOrEqualThan?: number, orgUnitGroupSetIdGreaterThan?: number, orgUnitGroupSetIdIn?: Array<number>, orgUnitGroupSetIdLessOrEqualThan?: number, orgUnitGroupSetIdLessThan?: number, orgUnitGroupSetIdSpecified?: boolean, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, uidContains?: string, uidEquals?: string, uidIn?: Array<string>, uidSpecified?: boolean, unpaged?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




























































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (attributeValuesIdEquals !== undefined && attributeValuesIdEquals !== null) {
            queryParameters = queryParameters.set('attributeValuesId.equals', <any>attributeValuesIdEquals);
        }
        if (attributeValuesIdGreaterOrEqualThan !== undefined && attributeValuesIdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.greaterOrEqualThan', <any>attributeValuesIdGreaterOrEqualThan);
        }
        if (attributeValuesIdGreaterThan !== undefined && attributeValuesIdGreaterThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.greaterThan', <any>attributeValuesIdGreaterThan);
        }
        if (attributeValuesIdIn) {
            attributeValuesIdIn.forEach((element) => {
                queryParameters = queryParameters.append('attributeValuesId.in', <any>element);
            })
        }
        if (attributeValuesIdLessOrEqualThan !== undefined && attributeValuesIdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.lessOrEqualThan', <any>attributeValuesIdLessOrEqualThan);
        }
        if (attributeValuesIdLessThan !== undefined && attributeValuesIdLessThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.lessThan', <any>attributeValuesIdLessThan);
        }
        if (attributeValuesIdSpecified !== undefined && attributeValuesIdSpecified !== null) {
            queryParameters = queryParameters.set('attributeValuesId.specified', <any>attributeValuesIdSpecified);
        }
        if (codeContains !== undefined && codeContains !== null) {
            queryParameters = queryParameters.set('code.contains', <any>codeContains);
        }
        if (codeEquals !== undefined && codeEquals !== null) {
            queryParameters = queryParameters.set('code.equals', <any>codeEquals);
        }
        if (codeIn) {
            codeIn.forEach((element) => {
                queryParameters = queryParameters.append('code.in', <any>element);
            })
        }
        if (codeSpecified !== undefined && codeSpecified !== null) {
            queryParameters = queryParameters.set('code.specified', <any>codeSpecified);
        }
        if (createdEquals !== undefined && createdEquals !== null) {
            queryParameters = queryParameters.set('created.equals', <any>createdEquals.toISOString());
        }
        if (createdGreaterOrEqualThan !== undefined && createdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('created.greaterOrEqualThan', <any>createdGreaterOrEqualThan.toISOString());
        }
        if (createdGreaterThan !== undefined && createdGreaterThan !== null) {
            queryParameters = queryParameters.set('created.greaterThan', <any>createdGreaterThan.toISOString());
        }
        if (createdIn0EpochSecond !== undefined && createdIn0EpochSecond !== null) {
            queryParameters = queryParameters.set('created.in[0].epochSecond', <any>createdIn0EpochSecond);
        }
        if (createdIn0Nano !== undefined && createdIn0Nano !== null) {
            queryParameters = queryParameters.set('created.in[0].nano', <any>createdIn0Nano);
        }
        if (createdLessOrEqualThan !== undefined && createdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('created.lessOrEqualThan', <any>createdLessOrEqualThan.toISOString());
        }
        if (createdLessThan !== undefined && createdLessThan !== null) {
            queryParameters = queryParameters.set('created.lessThan', <any>createdLessThan.toISOString());
        }
        if (createdSpecified !== undefined && createdSpecified !== null) {
            queryParameters = queryParameters.set('created.specified', <any>createdSpecified);
        }
        if (idEquals !== undefined && idEquals !== null) {
            queryParameters = queryParameters.set('id.equals', <any>idEquals);
        }
        if (idGreaterOrEqualThan !== undefined && idGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('id.greaterOrEqualThan', <any>idGreaterOrEqualThan);
        }
        if (idGreaterThan !== undefined && idGreaterThan !== null) {
            queryParameters = queryParameters.set('id.greaterThan', <any>idGreaterThan);
        }
        if (idIn) {
            idIn.forEach((element) => {
                queryParameters = queryParameters.append('id.in', <any>element);
            })
        }
        if (idLessOrEqualThan !== undefined && idLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('id.lessOrEqualThan', <any>idLessOrEqualThan);
        }
        if (idLessThan !== undefined && idLessThan !== null) {
            queryParameters = queryParameters.set('id.lessThan', <any>idLessThan);
        }
        if (idSpecified !== undefined && idSpecified !== null) {
            queryParameters = queryParameters.set('id.specified', <any>idSpecified);
        }
        if (lastUpdateEquals !== undefined && lastUpdateEquals !== null) {
            queryParameters = queryParameters.set('lastUpdate.equals', <any>lastUpdateEquals.toISOString());
        }
        if (lastUpdateGreaterOrEqualThan !== undefined && lastUpdateGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('lastUpdate.greaterOrEqualThan', <any>lastUpdateGreaterOrEqualThan.toISOString());
        }
        if (lastUpdateGreaterThan !== undefined && lastUpdateGreaterThan !== null) {
            queryParameters = queryParameters.set('lastUpdate.greaterThan', <any>lastUpdateGreaterThan.toISOString());
        }
        if (lastUpdateIn0EpochSecond !== undefined && lastUpdateIn0EpochSecond !== null) {
            queryParameters = queryParameters.set('lastUpdate.in[0].epochSecond', <any>lastUpdateIn0EpochSecond);
        }
        if (lastUpdateIn0Nano !== undefined && lastUpdateIn0Nano !== null) {
            queryParameters = queryParameters.set('lastUpdate.in[0].nano', <any>lastUpdateIn0Nano);
        }
        if (lastUpdateLessOrEqualThan !== undefined && lastUpdateLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('lastUpdate.lessOrEqualThan', <any>lastUpdateLessOrEqualThan.toISOString());
        }
        if (lastUpdateLessThan !== undefined && lastUpdateLessThan !== null) {
            queryParameters = queryParameters.set('lastUpdate.lessThan', <any>lastUpdateLessThan.toISOString());
        }
        if (lastUpdateSpecified !== undefined && lastUpdateSpecified !== null) {
            queryParameters = queryParameters.set('lastUpdate.specified', <any>lastUpdateSpecified);
        }
        if (nameContains !== undefined && nameContains !== null) {
            queryParameters = queryParameters.set('name.contains', <any>nameContains);
        }
        if (nameEquals !== undefined && nameEquals !== null) {
            queryParameters = queryParameters.set('name.equals', <any>nameEquals);
        }
        if (nameIn) {
            nameIn.forEach((element) => {
                queryParameters = queryParameters.append('name.in', <any>element);
            })
        }
        if (nameSpecified !== undefined && nameSpecified !== null) {
            queryParameters = queryParameters.set('name.specified', <any>nameSpecified);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (orgUnitGroupSetIdEquals !== undefined && orgUnitGroupSetIdEquals !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetId.equals', <any>orgUnitGroupSetIdEquals);
        }
        if (orgUnitGroupSetIdGreaterOrEqualThan !== undefined && orgUnitGroupSetIdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetId.greaterOrEqualThan', <any>orgUnitGroupSetIdGreaterOrEqualThan);
        }
        if (orgUnitGroupSetIdGreaterThan !== undefined && orgUnitGroupSetIdGreaterThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetId.greaterThan', <any>orgUnitGroupSetIdGreaterThan);
        }
        if (orgUnitGroupSetIdIn) {
            orgUnitGroupSetIdIn.forEach((element) => {
                queryParameters = queryParameters.append('orgUnitGroupSetId.in', <any>element);
            })
        }
        if (orgUnitGroupSetIdLessOrEqualThan !== undefined && orgUnitGroupSetIdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetId.lessOrEqualThan', <any>orgUnitGroupSetIdLessOrEqualThan);
        }
        if (orgUnitGroupSetIdLessThan !== undefined && orgUnitGroupSetIdLessThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetId.lessThan', <any>orgUnitGroupSetIdLessThan);
        }
        if (orgUnitGroupSetIdSpecified !== undefined && orgUnitGroupSetIdSpecified !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetId.specified', <any>orgUnitGroupSetIdSpecified);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (paged !== undefined && paged !== null) {
            queryParameters = queryParameters.set('paged', <any>paged);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters = queryParameters.append('sort', <any>element);
            })
        }
        if (sortSorted !== undefined && sortSorted !== null) {
            queryParameters = queryParameters.set('sort.sorted', <any>sortSorted);
        }
        if (sortUnsorted !== undefined && sortUnsorted !== null) {
            queryParameters = queryParameters.set('sort.unsorted', <any>sortUnsorted);
        }
        if (uidContains !== undefined && uidContains !== null) {
            queryParameters = queryParameters.set('uid.contains', <any>uidContains);
        }
        if (uidEquals !== undefined && uidEquals !== null) {
            queryParameters = queryParameters.set('uid.equals', <any>uidEquals);
        }
        if (uidIn) {
            uidIn.forEach((element) => {
                queryParameters = queryParameters.append('uid.in', <any>element);
            })
        }
        if (uidSpecified !== undefined && uidSpecified !== null) {
            queryParameters = queryParameters.set('uid.specified', <any>uidSpecified);
        }
        if (unpaged !== undefined && unpaged !== null) {
            queryParameters = queryParameters.set('unpaged', <any>unpaged);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OrgUnitGroup>>(`${this.basePath}/api/org-unit-groups`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getOrgUnitGroup
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrgUnitGroupUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitGroup>;
    public getOrgUnitGroupUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitGroup>>;
    public getOrgUnitGroupUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitGroup>>;
    public getOrgUnitGroupUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getOrgUnitGroupUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<OrgUnitGroup>(`${this.basePath}/api/org-unit-groups/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateOrgUnitGroup
     * 
     * @param orgUnitGroup orgUnitGroup
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateOrgUnitGroupUsingPUT(orgUnitGroup: OrgUnitGroup, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitGroup>;
    public updateOrgUnitGroupUsingPUT(orgUnitGroup: OrgUnitGroup, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitGroup>>;
    public updateOrgUnitGroupUsingPUT(orgUnitGroup: OrgUnitGroup, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitGroup>>;
    public updateOrgUnitGroupUsingPUT(orgUnitGroup: OrgUnitGroup, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orgUnitGroup === null || orgUnitGroup === undefined) {
            throw new Error('Required parameter orgUnitGroup was null or undefined when calling updateOrgUnitGroupUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<OrgUnitGroup>(`${this.basePath}/api/org-unit-groups`,
            orgUnitGroup,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

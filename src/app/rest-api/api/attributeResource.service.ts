/**
 * server API
 * server API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Attribute } from '../model/attribute';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class AttributeResourceService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createAttribute
     * 
     * @param attribute attribute
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAttributeUsingPOST(attribute: Attribute, observe?: 'body', reportProgress?: boolean): Observable<Attribute>;
    public createAttributeUsingPOST(attribute: Attribute, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Attribute>>;
    public createAttributeUsingPOST(attribute: Attribute, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Attribute>>;
    public createAttributeUsingPOST(attribute: Attribute, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (attribute === null || attribute === undefined) {
            throw new Error('Required parameter attribute was null or undefined when calling createAttributeUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Attribute>(`${this.basePath}/api/attributes`,
            attribute,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteAttribute
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAttributeUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAttributeUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAttributeUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAttributeUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteAttributeUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/attributes/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllAttributes
     * 
     * @param codeContains 
     * @param codeEquals 
     * @param codeIn 
     * @param codeSpecified 
     * @param idEquals 
     * @param idGreaterOrEqualThan 
     * @param idGreaterThan 
     * @param idIn 
     * @param idLessOrEqualThan 
     * @param idLessThan 
     * @param idSpecified 
     * @param mandatoryEquals 
     * @param mandatoryIn 
     * @param mandatorySpecified 
     * @param nameContains 
     * @param nameEquals 
     * @param nameIn 
     * @param nameSpecified 
     * @param offset 
     * @param optionSetIdEquals 
     * @param optionSetIdGreaterOrEqualThan 
     * @param optionSetIdGreaterThan 
     * @param optionSetIdIn 
     * @param optionSetIdLessOrEqualThan 
     * @param optionSetIdLessThan 
     * @param optionSetIdSpecified 
     * @param orgUnitAttributeEquals 
     * @param orgUnitAttributeIn 
     * @param orgUnitAttributeSpecified 
     * @param orgUnitGroupAttributeEquals 
     * @param orgUnitGroupAttributeIn 
     * @param orgUnitGroupAttributeSpecified 
     * @param orgUnitGroupSetAttributeEquals 
     * @param orgUnitGroupSetAttributeIn 
     * @param orgUnitGroupSetAttributeSpecified 
     * @param page Page number of the requested page
     * @param pageNumber 
     * @param pageSize 
     * @param paged 
     * @param size Size of a page
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param sortSorted 
     * @param sortUnsorted 
     * @param sortOrderEquals 
     * @param sortOrderGreaterOrEqualThan 
     * @param sortOrderGreaterThan 
     * @param sortOrderIn 
     * @param sortOrderLessOrEqualThan 
     * @param sortOrderLessThan 
     * @param sortOrderSpecified 
     * @param unpaged 
     * @param userAttributeEquals 
     * @param userAttributeIn 
     * @param userAttributeSpecified 
     * @param uuidContains 
     * @param uuidEquals 
     * @param uuidIn 
     * @param uuidSpecified 
     * @param valueTypeContains 
     * @param valueTypeEquals 
     * @param valueTypeIn 
     * @param valueTypeSpecified 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllAttributesUsingGET(codeContains?: string, codeEquals?: string, codeIn?: Array<string>, codeSpecified?: boolean, idEquals?: number, idGreaterOrEqualThan?: number, idGreaterThan?: number, idIn?: Array<number>, idLessOrEqualThan?: number, idLessThan?: number, idSpecified?: boolean, mandatoryEquals?: boolean, mandatoryIn?: Array<boolean>, mandatorySpecified?: boolean, nameContains?: string, nameEquals?: string, nameIn?: Array<string>, nameSpecified?: boolean, offset?: number, optionSetIdEquals?: number, optionSetIdGreaterOrEqualThan?: number, optionSetIdGreaterThan?: number, optionSetIdIn?: Array<number>, optionSetIdLessOrEqualThan?: number, optionSetIdLessThan?: number, optionSetIdSpecified?: boolean, orgUnitAttributeEquals?: boolean, orgUnitAttributeIn?: Array<boolean>, orgUnitAttributeSpecified?: boolean, orgUnitGroupAttributeEquals?: boolean, orgUnitGroupAttributeIn?: Array<boolean>, orgUnitGroupAttributeSpecified?: boolean, orgUnitGroupSetAttributeEquals?: boolean, orgUnitGroupSetAttributeIn?: Array<boolean>, orgUnitGroupSetAttributeSpecified?: boolean, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, sortOrderEquals?: number, sortOrderGreaterOrEqualThan?: number, sortOrderGreaterThan?: number, sortOrderIn?: Array<number>, sortOrderLessOrEqualThan?: number, sortOrderLessThan?: number, sortOrderSpecified?: boolean, unpaged?: boolean, userAttributeEquals?: boolean, userAttributeIn?: Array<boolean>, userAttributeSpecified?: boolean, uuidContains?: string, uuidEquals?: string, uuidIn?: Array<string>, uuidSpecified?: boolean, valueTypeContains?: string, valueTypeEquals?: string, valueTypeIn?: Array<string>, valueTypeSpecified?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<Attribute>>;
    public getAllAttributesUsingGET(codeContains?: string, codeEquals?: string, codeIn?: Array<string>, codeSpecified?: boolean, idEquals?: number, idGreaterOrEqualThan?: number, idGreaterThan?: number, idIn?: Array<number>, idLessOrEqualThan?: number, idLessThan?: number, idSpecified?: boolean, mandatoryEquals?: boolean, mandatoryIn?: Array<boolean>, mandatorySpecified?: boolean, nameContains?: string, nameEquals?: string, nameIn?: Array<string>, nameSpecified?: boolean, offset?: number, optionSetIdEquals?: number, optionSetIdGreaterOrEqualThan?: number, optionSetIdGreaterThan?: number, optionSetIdIn?: Array<number>, optionSetIdLessOrEqualThan?: number, optionSetIdLessThan?: number, optionSetIdSpecified?: boolean, orgUnitAttributeEquals?: boolean, orgUnitAttributeIn?: Array<boolean>, orgUnitAttributeSpecified?: boolean, orgUnitGroupAttributeEquals?: boolean, orgUnitGroupAttributeIn?: Array<boolean>, orgUnitGroupAttributeSpecified?: boolean, orgUnitGroupSetAttributeEquals?: boolean, orgUnitGroupSetAttributeIn?: Array<boolean>, orgUnitGroupSetAttributeSpecified?: boolean, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, sortOrderEquals?: number, sortOrderGreaterOrEqualThan?: number, sortOrderGreaterThan?: number, sortOrderIn?: Array<number>, sortOrderLessOrEqualThan?: number, sortOrderLessThan?: number, sortOrderSpecified?: boolean, unpaged?: boolean, userAttributeEquals?: boolean, userAttributeIn?: Array<boolean>, userAttributeSpecified?: boolean, uuidContains?: string, uuidEquals?: string, uuidIn?: Array<string>, uuidSpecified?: boolean, valueTypeContains?: string, valueTypeEquals?: string, valueTypeIn?: Array<string>, valueTypeSpecified?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Attribute>>>;
    public getAllAttributesUsingGET(codeContains?: string, codeEquals?: string, codeIn?: Array<string>, codeSpecified?: boolean, idEquals?: number, idGreaterOrEqualThan?: number, idGreaterThan?: number, idIn?: Array<number>, idLessOrEqualThan?: number, idLessThan?: number, idSpecified?: boolean, mandatoryEquals?: boolean, mandatoryIn?: Array<boolean>, mandatorySpecified?: boolean, nameContains?: string, nameEquals?: string, nameIn?: Array<string>, nameSpecified?: boolean, offset?: number, optionSetIdEquals?: number, optionSetIdGreaterOrEqualThan?: number, optionSetIdGreaterThan?: number, optionSetIdIn?: Array<number>, optionSetIdLessOrEqualThan?: number, optionSetIdLessThan?: number, optionSetIdSpecified?: boolean, orgUnitAttributeEquals?: boolean, orgUnitAttributeIn?: Array<boolean>, orgUnitAttributeSpecified?: boolean, orgUnitGroupAttributeEquals?: boolean, orgUnitGroupAttributeIn?: Array<boolean>, orgUnitGroupAttributeSpecified?: boolean, orgUnitGroupSetAttributeEquals?: boolean, orgUnitGroupSetAttributeIn?: Array<boolean>, orgUnitGroupSetAttributeSpecified?: boolean, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, sortOrderEquals?: number, sortOrderGreaterOrEqualThan?: number, sortOrderGreaterThan?: number, sortOrderIn?: Array<number>, sortOrderLessOrEqualThan?: number, sortOrderLessThan?: number, sortOrderSpecified?: boolean, unpaged?: boolean, userAttributeEquals?: boolean, userAttributeIn?: Array<boolean>, userAttributeSpecified?: boolean, uuidContains?: string, uuidEquals?: string, uuidIn?: Array<string>, uuidSpecified?: boolean, valueTypeContains?: string, valueTypeEquals?: string, valueTypeIn?: Array<string>, valueTypeSpecified?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Attribute>>>;
    public getAllAttributesUsingGET(codeContains?: string, codeEquals?: string, codeIn?: Array<string>, codeSpecified?: boolean, idEquals?: number, idGreaterOrEqualThan?: number, idGreaterThan?: number, idIn?: Array<number>, idLessOrEqualThan?: number, idLessThan?: number, idSpecified?: boolean, mandatoryEquals?: boolean, mandatoryIn?: Array<boolean>, mandatorySpecified?: boolean, nameContains?: string, nameEquals?: string, nameIn?: Array<string>, nameSpecified?: boolean, offset?: number, optionSetIdEquals?: number, optionSetIdGreaterOrEqualThan?: number, optionSetIdGreaterThan?: number, optionSetIdIn?: Array<number>, optionSetIdLessOrEqualThan?: number, optionSetIdLessThan?: number, optionSetIdSpecified?: boolean, orgUnitAttributeEquals?: boolean, orgUnitAttributeIn?: Array<boolean>, orgUnitAttributeSpecified?: boolean, orgUnitGroupAttributeEquals?: boolean, orgUnitGroupAttributeIn?: Array<boolean>, orgUnitGroupAttributeSpecified?: boolean, orgUnitGroupSetAttributeEquals?: boolean, orgUnitGroupSetAttributeIn?: Array<boolean>, orgUnitGroupSetAttributeSpecified?: boolean, page?: number, pageNumber?: number, pageSize?: number, paged?: boolean, size?: number, sort?: Array<string>, sortSorted?: boolean, sortUnsorted?: boolean, sortOrderEquals?: number, sortOrderGreaterOrEqualThan?: number, sortOrderGreaterThan?: number, sortOrderIn?: Array<number>, sortOrderLessOrEqualThan?: number, sortOrderLessThan?: number, sortOrderSpecified?: boolean, unpaged?: boolean, userAttributeEquals?: boolean, userAttributeIn?: Array<boolean>, userAttributeSpecified?: boolean, uuidContains?: string, uuidEquals?: string, uuidIn?: Array<string>, uuidSpecified?: boolean, valueTypeContains?: string, valueTypeEquals?: string, valueTypeIn?: Array<string>, valueTypeSpecified?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (codeContains !== undefined && codeContains !== null) {
            queryParameters = queryParameters.set('code.contains', <any>codeContains);
        }
        if (codeEquals !== undefined && codeEquals !== null) {
            queryParameters = queryParameters.set('code.equals', <any>codeEquals);
        }
        if (codeIn) {
            codeIn.forEach((element) => {
                queryParameters = queryParameters.append('code.in', <any>element);
            })
        }
        if (codeSpecified !== undefined && codeSpecified !== null) {
            queryParameters = queryParameters.set('code.specified', <any>codeSpecified);
        }
        if (idEquals !== undefined && idEquals !== null) {
            queryParameters = queryParameters.set('id.equals', <any>idEquals);
        }
        if (idGreaterOrEqualThan !== undefined && idGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('id.greaterOrEqualThan', <any>idGreaterOrEqualThan);
        }
        if (idGreaterThan !== undefined && idGreaterThan !== null) {
            queryParameters = queryParameters.set('id.greaterThan', <any>idGreaterThan);
        }
        if (idIn) {
            idIn.forEach((element) => {
                queryParameters = queryParameters.append('id.in', <any>element);
            })
        }
        if (idLessOrEqualThan !== undefined && idLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('id.lessOrEqualThan', <any>idLessOrEqualThan);
        }
        if (idLessThan !== undefined && idLessThan !== null) {
            queryParameters = queryParameters.set('id.lessThan', <any>idLessThan);
        }
        if (idSpecified !== undefined && idSpecified !== null) {
            queryParameters = queryParameters.set('id.specified', <any>idSpecified);
        }
        if (mandatoryEquals !== undefined && mandatoryEquals !== null) {
            queryParameters = queryParameters.set('mandatory.equals', <any>mandatoryEquals);
        }
        if (mandatoryIn) {
            mandatoryIn.forEach((element) => {
                queryParameters = queryParameters.append('mandatory.in', <any>element);
            })
        }
        if (mandatorySpecified !== undefined && mandatorySpecified !== null) {
            queryParameters = queryParameters.set('mandatory.specified', <any>mandatorySpecified);
        }
        if (nameContains !== undefined && nameContains !== null) {
            queryParameters = queryParameters.set('name.contains', <any>nameContains);
        }
        if (nameEquals !== undefined && nameEquals !== null) {
            queryParameters = queryParameters.set('name.equals', <any>nameEquals);
        }
        if (nameIn) {
            nameIn.forEach((element) => {
                queryParameters = queryParameters.append('name.in', <any>element);
            })
        }
        if (nameSpecified !== undefined && nameSpecified !== null) {
            queryParameters = queryParameters.set('name.specified', <any>nameSpecified);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (optionSetIdEquals !== undefined && optionSetIdEquals !== null) {
            queryParameters = queryParameters.set('optionSetId.equals', <any>optionSetIdEquals);
        }
        if (optionSetIdGreaterOrEqualThan !== undefined && optionSetIdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('optionSetId.greaterOrEqualThan', <any>optionSetIdGreaterOrEqualThan);
        }
        if (optionSetIdGreaterThan !== undefined && optionSetIdGreaterThan !== null) {
            queryParameters = queryParameters.set('optionSetId.greaterThan', <any>optionSetIdGreaterThan);
        }
        if (optionSetIdIn) {
            optionSetIdIn.forEach((element) => {
                queryParameters = queryParameters.append('optionSetId.in', <any>element);
            })
        }
        if (optionSetIdLessOrEqualThan !== undefined && optionSetIdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('optionSetId.lessOrEqualThan', <any>optionSetIdLessOrEqualThan);
        }
        if (optionSetIdLessThan !== undefined && optionSetIdLessThan !== null) {
            queryParameters = queryParameters.set('optionSetId.lessThan', <any>optionSetIdLessThan);
        }
        if (optionSetIdSpecified !== undefined && optionSetIdSpecified !== null) {
            queryParameters = queryParameters.set('optionSetId.specified', <any>optionSetIdSpecified);
        }
        if (orgUnitAttributeEquals !== undefined && orgUnitAttributeEquals !== null) {
            queryParameters = queryParameters.set('orgUnitAttribute.equals', <any>orgUnitAttributeEquals);
        }
        if (orgUnitAttributeIn) {
            orgUnitAttributeIn.forEach((element) => {
                queryParameters = queryParameters.append('orgUnitAttribute.in', <any>element);
            })
        }
        if (orgUnitAttributeSpecified !== undefined && orgUnitAttributeSpecified !== null) {
            queryParameters = queryParameters.set('orgUnitAttribute.specified', <any>orgUnitAttributeSpecified);
        }
        if (orgUnitGroupAttributeEquals !== undefined && orgUnitGroupAttributeEquals !== null) {
            queryParameters = queryParameters.set('orgUnitGroupAttribute.equals', <any>orgUnitGroupAttributeEquals);
        }
        if (orgUnitGroupAttributeIn) {
            orgUnitGroupAttributeIn.forEach((element) => {
                queryParameters = queryParameters.append('orgUnitGroupAttribute.in', <any>element);
            })
        }
        if (orgUnitGroupAttributeSpecified !== undefined && orgUnitGroupAttributeSpecified !== null) {
            queryParameters = queryParameters.set('orgUnitGroupAttribute.specified', <any>orgUnitGroupAttributeSpecified);
        }
        if (orgUnitGroupSetAttributeEquals !== undefined && orgUnitGroupSetAttributeEquals !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetAttribute.equals', <any>orgUnitGroupSetAttributeEquals);
        }
        if (orgUnitGroupSetAttributeIn) {
            orgUnitGroupSetAttributeIn.forEach((element) => {
                queryParameters = queryParameters.append('orgUnitGroupSetAttribute.in', <any>element);
            })
        }
        if (orgUnitGroupSetAttributeSpecified !== undefined && orgUnitGroupSetAttributeSpecified !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetAttribute.specified', <any>orgUnitGroupSetAttributeSpecified);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (paged !== undefined && paged !== null) {
            queryParameters = queryParameters.set('paged', <any>paged);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters = queryParameters.append('sort', <any>element);
            })
        }
        if (sortSorted !== undefined && sortSorted !== null) {
            queryParameters = queryParameters.set('sort.sorted', <any>sortSorted);
        }
        if (sortUnsorted !== undefined && sortUnsorted !== null) {
            queryParameters = queryParameters.set('sort.unsorted', <any>sortUnsorted);
        }
        if (sortOrderEquals !== undefined && sortOrderEquals !== null) {
            queryParameters = queryParameters.set('sortOrder.equals', <any>sortOrderEquals);
        }
        if (sortOrderGreaterOrEqualThan !== undefined && sortOrderGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('sortOrder.greaterOrEqualThan', <any>sortOrderGreaterOrEqualThan);
        }
        if (sortOrderGreaterThan !== undefined && sortOrderGreaterThan !== null) {
            queryParameters = queryParameters.set('sortOrder.greaterThan', <any>sortOrderGreaterThan);
        }
        if (sortOrderIn) {
            sortOrderIn.forEach((element) => {
                queryParameters = queryParameters.append('sortOrder.in', <any>element);
            })
        }
        if (sortOrderLessOrEqualThan !== undefined && sortOrderLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('sortOrder.lessOrEqualThan', <any>sortOrderLessOrEqualThan);
        }
        if (sortOrderLessThan !== undefined && sortOrderLessThan !== null) {
            queryParameters = queryParameters.set('sortOrder.lessThan', <any>sortOrderLessThan);
        }
        if (sortOrderSpecified !== undefined && sortOrderSpecified !== null) {
            queryParameters = queryParameters.set('sortOrder.specified', <any>sortOrderSpecified);
        }
        if (unpaged !== undefined && unpaged !== null) {
            queryParameters = queryParameters.set('unpaged', <any>unpaged);
        }
        if (userAttributeEquals !== undefined && userAttributeEquals !== null) {
            queryParameters = queryParameters.set('userAttribute.equals', <any>userAttributeEquals);
        }
        if (userAttributeIn) {
            userAttributeIn.forEach((element) => {
                queryParameters = queryParameters.append('userAttribute.in', <any>element);
            })
        }
        if (userAttributeSpecified !== undefined && userAttributeSpecified !== null) {
            queryParameters = queryParameters.set('userAttribute.specified', <any>userAttributeSpecified);
        }
        if (uuidContains !== undefined && uuidContains !== null) {
            queryParameters = queryParameters.set('uuid.contains', <any>uuidContains);
        }
        if (uuidEquals !== undefined && uuidEquals !== null) {
            queryParameters = queryParameters.set('uuid.equals', <any>uuidEquals);
        }
        if (uuidIn) {
            uuidIn.forEach((element) => {
                queryParameters = queryParameters.append('uuid.in', <any>element);
            })
        }
        if (uuidSpecified !== undefined && uuidSpecified !== null) {
            queryParameters = queryParameters.set('uuid.specified', <any>uuidSpecified);
        }
        if (valueTypeContains !== undefined && valueTypeContains !== null) {
            queryParameters = queryParameters.set('valueType.contains', <any>valueTypeContains);
        }
        if (valueTypeEquals !== undefined && valueTypeEquals !== null) {
            queryParameters = queryParameters.set('valueType.equals', <any>valueTypeEquals);
        }
        if (valueTypeIn) {
            valueTypeIn.forEach((element) => {
                queryParameters = queryParameters.append('valueType.in', <any>element);
            })
        }
        if (valueTypeSpecified !== undefined && valueTypeSpecified !== null) {
            queryParameters = queryParameters.set('valueType.specified', <any>valueTypeSpecified);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Attribute>>(`${this.basePath}/api/attributes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAttribute
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAttributeUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<Attribute>;
    public getAttributeUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Attribute>>;
    public getAttributeUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Attribute>>;
    public getAttributeUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAttributeUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Attribute>(`${this.basePath}/api/attributes/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAttribute
     * 
     * @param attribute attribute
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAttributeUsingPUT(attribute: Attribute, observe?: 'body', reportProgress?: boolean): Observable<Attribute>;
    public updateAttributeUsingPUT(attribute: Attribute, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Attribute>>;
    public updateAttributeUsingPUT(attribute: Attribute, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Attribute>>;
    public updateAttributeUsingPUT(attribute: Attribute, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (attribute === null || attribute === undefined) {
            throw new Error('Required parameter attribute was null or undefined when calling updateAttributeUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Attribute>(`${this.basePath}/api/attributes`,
            attribute,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

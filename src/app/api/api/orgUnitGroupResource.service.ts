/**
 * server API
 * server API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { OrgUnitGroup } from '../model/orgUnitGroup';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class OrgUnitGroupResourceService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createOrgUnitGroup
     * 
     * @param OrgUnitGroup orgUnitGroup
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOrgUnitGroupUsingPOST(OrgUnitGroup: OrgUnitGroup, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitGroup>;
    public createOrgUnitGroupUsingPOST(OrgUnitGroup: OrgUnitGroup, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitGroup>>;
    public createOrgUnitGroupUsingPOST(OrgUnitGroup: OrgUnitGroup, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitGroup>>;
    public createOrgUnitGroupUsingPOST(OrgUnitGroup: OrgUnitGroup, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (OrgUnitGroup === null || OrgUnitGroup === undefined) {
            throw new Error('Required parameter OrgUnitGroup was null or undefined when calling createOrgUnitGroupUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<OrgUnitGroup>(`${this.basePath}/api/org-unit-groups`,
            OrgUnitGroup,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteOrgUnitGroup
     * 
     * @param Id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrgUnitGroupUsingDELETE(Id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteOrgUnitGroupUsingDELETE(Id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteOrgUnitGroupUsingDELETE(Id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteOrgUnitGroupUsingDELETE(Id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Id === null || Id === undefined) {
            throw new Error('Required parameter Id was null or undefined when calling deleteOrgUnitGroupUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/org-unit-groups/${encodeURIComponent(String(Id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllOrgUnitGroups
     * 
     * @param AttributeValuesIdEquals 
     * @param AttributeValuesIdGreaterOrEqualThan 
     * @param AttributeValuesIdGreaterThan 
     * @param AttributeValuesIdIn 
     * @param AttributeValuesIdLessOrEqualThan 
     * @param AttributeValuesIdLessThan 
     * @param AttributeValuesIdSpecified 
     * @param CodeContains 
     * @param CodeEquals 
     * @param CodeIn 
     * @param CodeSpecified 
     * @param CreatedEquals 
     * @param CreatedGreaterOrEqualThan 
     * @param CreatedGreaterThan 
     * @param CreatedIn0EpochSecond 
     * @param CreatedIn0Nano 
     * @param CreatedLessOrEqualThan 
     * @param CreatedLessThan 
     * @param CreatedSpecified 
     * @param IdEquals 
     * @param IdGreaterOrEqualThan 
     * @param IdGreaterThan 
     * @param IdIn 
     * @param IdLessOrEqualThan 
     * @param IdLessThan 
     * @param IdSpecified 
     * @param LastUpdateEquals 
     * @param LastUpdateGreaterOrEqualThan 
     * @param LastUpdateGreaterThan 
     * @param LastUpdateIn0EpochSecond 
     * @param LastUpdateIn0Nano 
     * @param LastUpdateLessOrEqualThan 
     * @param LastUpdateLessThan 
     * @param LastUpdateSpecified 
     * @param NameContains 
     * @param NameEquals 
     * @param NameIn 
     * @param NameSpecified 
     * @param Offset 
     * @param OrgUnitGroupSetIdEquals 
     * @param OrgUnitGroupSetIdGreaterOrEqualThan 
     * @param OrgUnitGroupSetIdGreaterThan 
     * @param OrgUnitGroupSetIdIn 
     * @param OrgUnitGroupSetIdLessOrEqualThan 
     * @param OrgUnitGroupSetIdLessThan 
     * @param OrgUnitGroupSetIdSpecified 
     * @param Page Page number of the requested page
     * @param PageNumber 
     * @param PageSize 
     * @param Paged 
     * @param Size Size of a page
     * @param Sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param SortSorted 
     * @param SortUnsorted 
     * @param UidContains 
     * @param UidEquals 
     * @param UidIn 
     * @param UidSpecified 
     * @param Unpaged 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllOrgUnitGroupsUsingGET(AttributeValuesIdEquals?: number, AttributeValuesIdGreaterOrEqualThan?: number, AttributeValuesIdGreaterThan?: number, AttributeValuesIdIn?: Array<number>, AttributeValuesIdLessOrEqualThan?: number, AttributeValuesIdLessThan?: number, AttributeValuesIdSpecified?: boolean, CodeContains?: string, CodeEquals?: string, CodeIn?: Array<string>, CodeSpecified?: boolean, CreatedEquals?: Date, CreatedGreaterOrEqualThan?: Date, CreatedGreaterThan?: Date, CreatedIn0EpochSecond?: number, CreatedIn0Nano?: number, CreatedLessOrEqualThan?: Date, CreatedLessThan?: Date, CreatedSpecified?: boolean, IdEquals?: number, IdGreaterOrEqualThan?: number, IdGreaterThan?: number, IdIn?: Array<number>, IdLessOrEqualThan?: number, IdLessThan?: number, IdSpecified?: boolean, LastUpdateEquals?: Date, LastUpdateGreaterOrEqualThan?: Date, LastUpdateGreaterThan?: Date, LastUpdateIn0EpochSecond?: number, LastUpdateIn0Nano?: number, LastUpdateLessOrEqualThan?: Date, LastUpdateLessThan?: Date, LastUpdateSpecified?: boolean, NameContains?: string, NameEquals?: string, NameIn?: Array<string>, NameSpecified?: boolean, Offset?: number, OrgUnitGroupSetIdEquals?: number, OrgUnitGroupSetIdGreaterOrEqualThan?: number, OrgUnitGroupSetIdGreaterThan?: number, OrgUnitGroupSetIdIn?: Array<number>, OrgUnitGroupSetIdLessOrEqualThan?: number, OrgUnitGroupSetIdLessThan?: number, OrgUnitGroupSetIdSpecified?: boolean, Page?: number, PageNumber?: number, PageSize?: number, Paged?: boolean, Size?: number, Sort?: Array<string>, SortSorted?: boolean, SortUnsorted?: boolean, UidContains?: string, UidEquals?: string, UidIn?: Array<string>, UidSpecified?: boolean, Unpaged?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<OrgUnitGroup>>;
    public getAllOrgUnitGroupsUsingGET(AttributeValuesIdEquals?: number, AttributeValuesIdGreaterOrEqualThan?: number, AttributeValuesIdGreaterThan?: number, AttributeValuesIdIn?: Array<number>, AttributeValuesIdLessOrEqualThan?: number, AttributeValuesIdLessThan?: number, AttributeValuesIdSpecified?: boolean, CodeContains?: string, CodeEquals?: string, CodeIn?: Array<string>, CodeSpecified?: boolean, CreatedEquals?: Date, CreatedGreaterOrEqualThan?: Date, CreatedGreaterThan?: Date, CreatedIn0EpochSecond?: number, CreatedIn0Nano?: number, CreatedLessOrEqualThan?: Date, CreatedLessThan?: Date, CreatedSpecified?: boolean, IdEquals?: number, IdGreaterOrEqualThan?: number, IdGreaterThan?: number, IdIn?: Array<number>, IdLessOrEqualThan?: number, IdLessThan?: number, IdSpecified?: boolean, LastUpdateEquals?: Date, LastUpdateGreaterOrEqualThan?: Date, LastUpdateGreaterThan?: Date, LastUpdateIn0EpochSecond?: number, LastUpdateIn0Nano?: number, LastUpdateLessOrEqualThan?: Date, LastUpdateLessThan?: Date, LastUpdateSpecified?: boolean, NameContains?: string, NameEquals?: string, NameIn?: Array<string>, NameSpecified?: boolean, Offset?: number, OrgUnitGroupSetIdEquals?: number, OrgUnitGroupSetIdGreaterOrEqualThan?: number, OrgUnitGroupSetIdGreaterThan?: number, OrgUnitGroupSetIdIn?: Array<number>, OrgUnitGroupSetIdLessOrEqualThan?: number, OrgUnitGroupSetIdLessThan?: number, OrgUnitGroupSetIdSpecified?: boolean, Page?: number, PageNumber?: number, PageSize?: number, Paged?: boolean, Size?: number, Sort?: Array<string>, SortSorted?: boolean, SortUnsorted?: boolean, UidContains?: string, UidEquals?: string, UidIn?: Array<string>, UidSpecified?: boolean, Unpaged?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrgUnitGroup>>>;
    public getAllOrgUnitGroupsUsingGET(AttributeValuesIdEquals?: number, AttributeValuesIdGreaterOrEqualThan?: number, AttributeValuesIdGreaterThan?: number, AttributeValuesIdIn?: Array<number>, AttributeValuesIdLessOrEqualThan?: number, AttributeValuesIdLessThan?: number, AttributeValuesIdSpecified?: boolean, CodeContains?: string, CodeEquals?: string, CodeIn?: Array<string>, CodeSpecified?: boolean, CreatedEquals?: Date, CreatedGreaterOrEqualThan?: Date, CreatedGreaterThan?: Date, CreatedIn0EpochSecond?: number, CreatedIn0Nano?: number, CreatedLessOrEqualThan?: Date, CreatedLessThan?: Date, CreatedSpecified?: boolean, IdEquals?: number, IdGreaterOrEqualThan?: number, IdGreaterThan?: number, IdIn?: Array<number>, IdLessOrEqualThan?: number, IdLessThan?: number, IdSpecified?: boolean, LastUpdateEquals?: Date, LastUpdateGreaterOrEqualThan?: Date, LastUpdateGreaterThan?: Date, LastUpdateIn0EpochSecond?: number, LastUpdateIn0Nano?: number, LastUpdateLessOrEqualThan?: Date, LastUpdateLessThan?: Date, LastUpdateSpecified?: boolean, NameContains?: string, NameEquals?: string, NameIn?: Array<string>, NameSpecified?: boolean, Offset?: number, OrgUnitGroupSetIdEquals?: number, OrgUnitGroupSetIdGreaterOrEqualThan?: number, OrgUnitGroupSetIdGreaterThan?: number, OrgUnitGroupSetIdIn?: Array<number>, OrgUnitGroupSetIdLessOrEqualThan?: number, OrgUnitGroupSetIdLessThan?: number, OrgUnitGroupSetIdSpecified?: boolean, Page?: number, PageNumber?: number, PageSize?: number, Paged?: boolean, Size?: number, Sort?: Array<string>, SortSorted?: boolean, SortUnsorted?: boolean, UidContains?: string, UidEquals?: string, UidIn?: Array<string>, UidSpecified?: boolean, Unpaged?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrgUnitGroup>>>;
    public getAllOrgUnitGroupsUsingGET(AttributeValuesIdEquals?: number, AttributeValuesIdGreaterOrEqualThan?: number, AttributeValuesIdGreaterThan?: number, AttributeValuesIdIn?: Array<number>, AttributeValuesIdLessOrEqualThan?: number, AttributeValuesIdLessThan?: number, AttributeValuesIdSpecified?: boolean, CodeContains?: string, CodeEquals?: string, CodeIn?: Array<string>, CodeSpecified?: boolean, CreatedEquals?: Date, CreatedGreaterOrEqualThan?: Date, CreatedGreaterThan?: Date, CreatedIn0EpochSecond?: number, CreatedIn0Nano?: number, CreatedLessOrEqualThan?: Date, CreatedLessThan?: Date, CreatedSpecified?: boolean, IdEquals?: number, IdGreaterOrEqualThan?: number, IdGreaterThan?: number, IdIn?: Array<number>, IdLessOrEqualThan?: number, IdLessThan?: number, IdSpecified?: boolean, LastUpdateEquals?: Date, LastUpdateGreaterOrEqualThan?: Date, LastUpdateGreaterThan?: Date, LastUpdateIn0EpochSecond?: number, LastUpdateIn0Nano?: number, LastUpdateLessOrEqualThan?: Date, LastUpdateLessThan?: Date, LastUpdateSpecified?: boolean, NameContains?: string, NameEquals?: string, NameIn?: Array<string>, NameSpecified?: boolean, Offset?: number, OrgUnitGroupSetIdEquals?: number, OrgUnitGroupSetIdGreaterOrEqualThan?: number, OrgUnitGroupSetIdGreaterThan?: number, OrgUnitGroupSetIdIn?: Array<number>, OrgUnitGroupSetIdLessOrEqualThan?: number, OrgUnitGroupSetIdLessThan?: number, OrgUnitGroupSetIdSpecified?: boolean, Page?: number, PageNumber?: number, PageSize?: number, Paged?: boolean, Size?: number, Sort?: Array<string>, SortSorted?: boolean, SortUnsorted?: boolean, UidContains?: string, UidEquals?: string, UidIn?: Array<string>, UidSpecified?: boolean, Unpaged?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




























































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (AttributeValuesIdEquals !== undefined && AttributeValuesIdEquals !== null) {
            queryParameters = queryParameters.set('attributeValuesId.equals', <any>AttributeValuesIdEquals);
        }
        if (AttributeValuesIdGreaterOrEqualThan !== undefined && AttributeValuesIdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.greaterOrEqualThan', <any>AttributeValuesIdGreaterOrEqualThan);
        }
        if (AttributeValuesIdGreaterThan !== undefined && AttributeValuesIdGreaterThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.greaterThan', <any>AttributeValuesIdGreaterThan);
        }
        if (AttributeValuesIdIn) {
            AttributeValuesIdIn.forEach((element) => {
                queryParameters = queryParameters.append('attributeValuesId.in', <any>element);
            })
        }
        if (AttributeValuesIdLessOrEqualThan !== undefined && AttributeValuesIdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.lessOrEqualThan', <any>AttributeValuesIdLessOrEqualThan);
        }
        if (AttributeValuesIdLessThan !== undefined && AttributeValuesIdLessThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.lessThan', <any>AttributeValuesIdLessThan);
        }
        if (AttributeValuesIdSpecified !== undefined && AttributeValuesIdSpecified !== null) {
            queryParameters = queryParameters.set('attributeValuesId.specified', <any>AttributeValuesIdSpecified);
        }
        if (CodeContains !== undefined && CodeContains !== null) {
            queryParameters = queryParameters.set('code.contains', <any>CodeContains);
        }
        if (CodeEquals !== undefined && CodeEquals !== null) {
            queryParameters = queryParameters.set('code.equals', <any>CodeEquals);
        }
        if (CodeIn) {
            CodeIn.forEach((element) => {
                queryParameters = queryParameters.append('code.in', <any>element);
            })
        }
        if (CodeSpecified !== undefined && CodeSpecified !== null) {
            queryParameters = queryParameters.set('code.specified', <any>CodeSpecified);
        }
        if (CreatedEquals !== undefined && CreatedEquals !== null) {
            queryParameters = queryParameters.set('created.equals', <any>CreatedEquals.toISOString());
        }
        if (CreatedGreaterOrEqualThan !== undefined && CreatedGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('created.greaterOrEqualThan', <any>CreatedGreaterOrEqualThan.toISOString());
        }
        if (CreatedGreaterThan !== undefined && CreatedGreaterThan !== null) {
            queryParameters = queryParameters.set('created.greaterThan', <any>CreatedGreaterThan.toISOString());
        }
        if (CreatedIn0EpochSecond !== undefined && CreatedIn0EpochSecond !== null) {
            queryParameters = queryParameters.set('created.in[0].epochSecond', <any>CreatedIn0EpochSecond);
        }
        if (CreatedIn0Nano !== undefined && CreatedIn0Nano !== null) {
            queryParameters = queryParameters.set('created.in[0].nano', <any>CreatedIn0Nano);
        }
        if (CreatedLessOrEqualThan !== undefined && CreatedLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('created.lessOrEqualThan', <any>CreatedLessOrEqualThan.toISOString());
        }
        if (CreatedLessThan !== undefined && CreatedLessThan !== null) {
            queryParameters = queryParameters.set('created.lessThan', <any>CreatedLessThan.toISOString());
        }
        if (CreatedSpecified !== undefined && CreatedSpecified !== null) {
            queryParameters = queryParameters.set('created.specified', <any>CreatedSpecified);
        }
        if (IdEquals !== undefined && IdEquals !== null) {
            queryParameters = queryParameters.set('id.equals', <any>IdEquals);
        }
        if (IdGreaterOrEqualThan !== undefined && IdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('id.greaterOrEqualThan', <any>IdGreaterOrEqualThan);
        }
        if (IdGreaterThan !== undefined && IdGreaterThan !== null) {
            queryParameters = queryParameters.set('id.greaterThan', <any>IdGreaterThan);
        }
        if (IdIn) {
            IdIn.forEach((element) => {
                queryParameters = queryParameters.append('id.in', <any>element);
            })
        }
        if (IdLessOrEqualThan !== undefined && IdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('id.lessOrEqualThan', <any>IdLessOrEqualThan);
        }
        if (IdLessThan !== undefined && IdLessThan !== null) {
            queryParameters = queryParameters.set('id.lessThan', <any>IdLessThan);
        }
        if (IdSpecified !== undefined && IdSpecified !== null) {
            queryParameters = queryParameters.set('id.specified', <any>IdSpecified);
        }
        if (LastUpdateEquals !== undefined && LastUpdateEquals !== null) {
            queryParameters = queryParameters.set('lastUpdate.equals', <any>LastUpdateEquals.toISOString());
        }
        if (LastUpdateGreaterOrEqualThan !== undefined && LastUpdateGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('lastUpdate.greaterOrEqualThan', <any>LastUpdateGreaterOrEqualThan.toISOString());
        }
        if (LastUpdateGreaterThan !== undefined && LastUpdateGreaterThan !== null) {
            queryParameters = queryParameters.set('lastUpdate.greaterThan', <any>LastUpdateGreaterThan.toISOString());
        }
        if (LastUpdateIn0EpochSecond !== undefined && LastUpdateIn0EpochSecond !== null) {
            queryParameters = queryParameters.set('lastUpdate.in[0].epochSecond', <any>LastUpdateIn0EpochSecond);
        }
        if (LastUpdateIn0Nano !== undefined && LastUpdateIn0Nano !== null) {
            queryParameters = queryParameters.set('lastUpdate.in[0].nano', <any>LastUpdateIn0Nano);
        }
        if (LastUpdateLessOrEqualThan !== undefined && LastUpdateLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('lastUpdate.lessOrEqualThan', <any>LastUpdateLessOrEqualThan.toISOString());
        }
        if (LastUpdateLessThan !== undefined && LastUpdateLessThan !== null) {
            queryParameters = queryParameters.set('lastUpdate.lessThan', <any>LastUpdateLessThan.toISOString());
        }
        if (LastUpdateSpecified !== undefined && LastUpdateSpecified !== null) {
            queryParameters = queryParameters.set('lastUpdate.specified', <any>LastUpdateSpecified);
        }
        if (NameContains !== undefined && NameContains !== null) {
            queryParameters = queryParameters.set('name.contains', <any>NameContains);
        }
        if (NameEquals !== undefined && NameEquals !== null) {
            queryParameters = queryParameters.set('name.equals', <any>NameEquals);
        }
        if (NameIn) {
            NameIn.forEach((element) => {
                queryParameters = queryParameters.append('name.in', <any>element);
            })
        }
        if (NameSpecified !== undefined && NameSpecified !== null) {
            queryParameters = queryParameters.set('name.specified', <any>NameSpecified);
        }
        if (Offset !== undefined && Offset !== null) {
            queryParameters = queryParameters.set('offset', <any>Offset);
        }
        if (OrgUnitGroupSetIdEquals !== undefined && OrgUnitGroupSetIdEquals !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetId.equals', <any>OrgUnitGroupSetIdEquals);
        }
        if (OrgUnitGroupSetIdGreaterOrEqualThan !== undefined && OrgUnitGroupSetIdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetId.greaterOrEqualThan', <any>OrgUnitGroupSetIdGreaterOrEqualThan);
        }
        if (OrgUnitGroupSetIdGreaterThan !== undefined && OrgUnitGroupSetIdGreaterThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetId.greaterThan', <any>OrgUnitGroupSetIdGreaterThan);
        }
        if (OrgUnitGroupSetIdIn) {
            OrgUnitGroupSetIdIn.forEach((element) => {
                queryParameters = queryParameters.append('orgUnitGroupSetId.in', <any>element);
            })
        }
        if (OrgUnitGroupSetIdLessOrEqualThan !== undefined && OrgUnitGroupSetIdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetId.lessOrEqualThan', <any>OrgUnitGroupSetIdLessOrEqualThan);
        }
        if (OrgUnitGroupSetIdLessThan !== undefined && OrgUnitGroupSetIdLessThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetId.lessThan', <any>OrgUnitGroupSetIdLessThan);
        }
        if (OrgUnitGroupSetIdSpecified !== undefined && OrgUnitGroupSetIdSpecified !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetId.specified', <any>OrgUnitGroupSetIdSpecified);
        }
        if (Page !== undefined && Page !== null) {
            queryParameters = queryParameters.set('page', <any>Page);
        }
        if (PageNumber !== undefined && PageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>PageNumber);
        }
        if (PageSize !== undefined && PageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>PageSize);
        }
        if (Paged !== undefined && Paged !== null) {
            queryParameters = queryParameters.set('paged', <any>Paged);
        }
        if (Size !== undefined && Size !== null) {
            queryParameters = queryParameters.set('size', <any>Size);
        }
        if (Sort) {
            Sort.forEach((element) => {
                queryParameters = queryParameters.append('sort', <any>element);
            })
        }
        if (SortSorted !== undefined && SortSorted !== null) {
            queryParameters = queryParameters.set('sort.sorted', <any>SortSorted);
        }
        if (SortUnsorted !== undefined && SortUnsorted !== null) {
            queryParameters = queryParameters.set('sort.unsorted', <any>SortUnsorted);
        }
        if (UidContains !== undefined && UidContains !== null) {
            queryParameters = queryParameters.set('uid.contains', <any>UidContains);
        }
        if (UidEquals !== undefined && UidEquals !== null) {
            queryParameters = queryParameters.set('uid.equals', <any>UidEquals);
        }
        if (UidIn) {
            UidIn.forEach((element) => {
                queryParameters = queryParameters.append('uid.in', <any>element);
            })
        }
        if (UidSpecified !== undefined && UidSpecified !== null) {
            queryParameters = queryParameters.set('uid.specified', <any>UidSpecified);
        }
        if (Unpaged !== undefined && Unpaged !== null) {
            queryParameters = queryParameters.set('unpaged', <any>Unpaged);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OrgUnitGroup>>(`${this.basePath}/api/org-unit-groups`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getOrgUnitGroup
     * 
     * @param Id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrgUnitGroupUsingGET(Id: number, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitGroup>;
    public getOrgUnitGroupUsingGET(Id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitGroup>>;
    public getOrgUnitGroupUsingGET(Id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitGroup>>;
    public getOrgUnitGroupUsingGET(Id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Id === null || Id === undefined) {
            throw new Error('Required parameter Id was null or undefined when calling getOrgUnitGroupUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<OrgUnitGroup>(`${this.basePath}/api/org-unit-groups/${encodeURIComponent(String(Id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateOrgUnitGroup
     * 
     * @param OrgUnitGroup orgUnitGroup
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateOrgUnitGroupUsingPUT(OrgUnitGroup: OrgUnitGroup, observe?: 'body', reportProgress?: boolean): Observable<OrgUnitGroup>;
    public updateOrgUnitGroupUsingPUT(OrgUnitGroup: OrgUnitGroup, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrgUnitGroup>>;
    public updateOrgUnitGroupUsingPUT(OrgUnitGroup: OrgUnitGroup, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrgUnitGroup>>;
    public updateOrgUnitGroupUsingPUT(OrgUnitGroup: OrgUnitGroup, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (OrgUnitGroup === null || OrgUnitGroup === undefined) {
            throw new Error('Required parameter OrgUnitGroup was null or undefined when calling updateOrgUnitGroupUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<OrgUnitGroup>(`${this.basePath}/api/org-unit-groups`,
            OrgUnitGroup,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

/**
 * server API
 * server API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Attribute } from '../model/attribute';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class AttributeResourceService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createAttribute
     * 
     * @param Attribute attribute
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAttributeUsingPOST(Attribute: Attribute, observe?: 'body', reportProgress?: boolean): Observable<Attribute>;
    public createAttributeUsingPOST(Attribute: Attribute, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Attribute>>;
    public createAttributeUsingPOST(Attribute: Attribute, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Attribute>>;
    public createAttributeUsingPOST(Attribute: Attribute, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Attribute === null || Attribute === undefined) {
            throw new Error('Required parameter Attribute was null or undefined when calling createAttributeUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Attribute>(`${this.basePath}/api/attributes`,
            Attribute,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteAttribute
     * 
     * @param Id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAttributeUsingDELETE(Id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAttributeUsingDELETE(Id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAttributeUsingDELETE(Id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAttributeUsingDELETE(Id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Id === null || Id === undefined) {
            throw new Error('Required parameter Id was null or undefined when calling deleteAttributeUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/attributes/${encodeURIComponent(String(Id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllAttributes
     * 
     * @param CodeContains 
     * @param CodeEquals 
     * @param CodeIn 
     * @param CodeSpecified 
     * @param IdEquals 
     * @param IdGreaterOrEqualThan 
     * @param IdGreaterThan 
     * @param IdIn 
     * @param IdLessOrEqualThan 
     * @param IdLessThan 
     * @param IdSpecified 
     * @param MandatoryEquals 
     * @param MandatoryIn 
     * @param MandatorySpecified 
     * @param NameContains 
     * @param NameEquals 
     * @param NameIn 
     * @param NameSpecified 
     * @param Offset 
     * @param OptionSetIdEquals 
     * @param OptionSetIdGreaterOrEqualThan 
     * @param OptionSetIdGreaterThan 
     * @param OptionSetIdIn 
     * @param OptionSetIdLessOrEqualThan 
     * @param OptionSetIdLessThan 
     * @param OptionSetIdSpecified 
     * @param OrgUnitAttributeEquals 
     * @param OrgUnitAttributeIn 
     * @param OrgUnitAttributeSpecified 
     * @param OrgUnitGroupAttributeEquals 
     * @param OrgUnitGroupAttributeIn 
     * @param OrgUnitGroupAttributeSpecified 
     * @param OrgUnitGroupSetAttributeEquals 
     * @param OrgUnitGroupSetAttributeIn 
     * @param OrgUnitGroupSetAttributeSpecified 
     * @param Page Page number of the requested page
     * @param PageNumber 
     * @param PageSize 
     * @param Paged 
     * @param Size Size of a page
     * @param Sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param SortSorted 
     * @param SortUnsorted 
     * @param SortOrderEquals 
     * @param SortOrderGreaterOrEqualThan 
     * @param SortOrderGreaterThan 
     * @param SortOrderIn 
     * @param SortOrderLessOrEqualThan 
     * @param SortOrderLessThan 
     * @param SortOrderSpecified 
     * @param Unpaged 
     * @param UserAttributeEquals 
     * @param UserAttributeIn 
     * @param UserAttributeSpecified 
     * @param UuidContains 
     * @param UuidEquals 
     * @param UuidIn 
     * @param UuidSpecified 
     * @param ValueTypeContains 
     * @param ValueTypeEquals 
     * @param ValueTypeIn 
     * @param ValueTypeSpecified 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllAttributesUsingGET(CodeContains?: string, CodeEquals?: string, CodeIn?: Array<string>, CodeSpecified?: boolean, IdEquals?: number, IdGreaterOrEqualThan?: number, IdGreaterThan?: number, IdIn?: Array<number>, IdLessOrEqualThan?: number, IdLessThan?: number, IdSpecified?: boolean, MandatoryEquals?: boolean, MandatoryIn?: Array<boolean>, MandatorySpecified?: boolean, NameContains?: string, NameEquals?: string, NameIn?: Array<string>, NameSpecified?: boolean, Offset?: number, OptionSetIdEquals?: number, OptionSetIdGreaterOrEqualThan?: number, OptionSetIdGreaterThan?: number, OptionSetIdIn?: Array<number>, OptionSetIdLessOrEqualThan?: number, OptionSetIdLessThan?: number, OptionSetIdSpecified?: boolean, OrgUnitAttributeEquals?: boolean, OrgUnitAttributeIn?: Array<boolean>, OrgUnitAttributeSpecified?: boolean, OrgUnitGroupAttributeEquals?: boolean, OrgUnitGroupAttributeIn?: Array<boolean>, OrgUnitGroupAttributeSpecified?: boolean, OrgUnitGroupSetAttributeEquals?: boolean, OrgUnitGroupSetAttributeIn?: Array<boolean>, OrgUnitGroupSetAttributeSpecified?: boolean, Page?: number, PageNumber?: number, PageSize?: number, Paged?: boolean, Size?: number, Sort?: Array<string>, SortSorted?: boolean, SortUnsorted?: boolean, SortOrderEquals?: number, SortOrderGreaterOrEqualThan?: number, SortOrderGreaterThan?: number, SortOrderIn?: Array<number>, SortOrderLessOrEqualThan?: number, SortOrderLessThan?: number, SortOrderSpecified?: boolean, Unpaged?: boolean, UserAttributeEquals?: boolean, UserAttributeIn?: Array<boolean>, UserAttributeSpecified?: boolean, UuidContains?: string, UuidEquals?: string, UuidIn?: Array<string>, UuidSpecified?: boolean, ValueTypeContains?: string, ValueTypeEquals?: string, ValueTypeIn?: Array<string>, ValueTypeSpecified?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<Attribute>>;
    public getAllAttributesUsingGET(CodeContains?: string, CodeEquals?: string, CodeIn?: Array<string>, CodeSpecified?: boolean, IdEquals?: number, IdGreaterOrEqualThan?: number, IdGreaterThan?: number, IdIn?: Array<number>, IdLessOrEqualThan?: number, IdLessThan?: number, IdSpecified?: boolean, MandatoryEquals?: boolean, MandatoryIn?: Array<boolean>, MandatorySpecified?: boolean, NameContains?: string, NameEquals?: string, NameIn?: Array<string>, NameSpecified?: boolean, Offset?: number, OptionSetIdEquals?: number, OptionSetIdGreaterOrEqualThan?: number, OptionSetIdGreaterThan?: number, OptionSetIdIn?: Array<number>, OptionSetIdLessOrEqualThan?: number, OptionSetIdLessThan?: number, OptionSetIdSpecified?: boolean, OrgUnitAttributeEquals?: boolean, OrgUnitAttributeIn?: Array<boolean>, OrgUnitAttributeSpecified?: boolean, OrgUnitGroupAttributeEquals?: boolean, OrgUnitGroupAttributeIn?: Array<boolean>, OrgUnitGroupAttributeSpecified?: boolean, OrgUnitGroupSetAttributeEquals?: boolean, OrgUnitGroupSetAttributeIn?: Array<boolean>, OrgUnitGroupSetAttributeSpecified?: boolean, Page?: number, PageNumber?: number, PageSize?: number, Paged?: boolean, Size?: number, Sort?: Array<string>, SortSorted?: boolean, SortUnsorted?: boolean, SortOrderEquals?: number, SortOrderGreaterOrEqualThan?: number, SortOrderGreaterThan?: number, SortOrderIn?: Array<number>, SortOrderLessOrEqualThan?: number, SortOrderLessThan?: number, SortOrderSpecified?: boolean, Unpaged?: boolean, UserAttributeEquals?: boolean, UserAttributeIn?: Array<boolean>, UserAttributeSpecified?: boolean, UuidContains?: string, UuidEquals?: string, UuidIn?: Array<string>, UuidSpecified?: boolean, ValueTypeContains?: string, ValueTypeEquals?: string, ValueTypeIn?: Array<string>, ValueTypeSpecified?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Attribute>>>;
    public getAllAttributesUsingGET(CodeContains?: string, CodeEquals?: string, CodeIn?: Array<string>, CodeSpecified?: boolean, IdEquals?: number, IdGreaterOrEqualThan?: number, IdGreaterThan?: number, IdIn?: Array<number>, IdLessOrEqualThan?: number, IdLessThan?: number, IdSpecified?: boolean, MandatoryEquals?: boolean, MandatoryIn?: Array<boolean>, MandatorySpecified?: boolean, NameContains?: string, NameEquals?: string, NameIn?: Array<string>, NameSpecified?: boolean, Offset?: number, OptionSetIdEquals?: number, OptionSetIdGreaterOrEqualThan?: number, OptionSetIdGreaterThan?: number, OptionSetIdIn?: Array<number>, OptionSetIdLessOrEqualThan?: number, OptionSetIdLessThan?: number, OptionSetIdSpecified?: boolean, OrgUnitAttributeEquals?: boolean, OrgUnitAttributeIn?: Array<boolean>, OrgUnitAttributeSpecified?: boolean, OrgUnitGroupAttributeEquals?: boolean, OrgUnitGroupAttributeIn?: Array<boolean>, OrgUnitGroupAttributeSpecified?: boolean, OrgUnitGroupSetAttributeEquals?: boolean, OrgUnitGroupSetAttributeIn?: Array<boolean>, OrgUnitGroupSetAttributeSpecified?: boolean, Page?: number, PageNumber?: number, PageSize?: number, Paged?: boolean, Size?: number, Sort?: Array<string>, SortSorted?: boolean, SortUnsorted?: boolean, SortOrderEquals?: number, SortOrderGreaterOrEqualThan?: number, SortOrderGreaterThan?: number, SortOrderIn?: Array<number>, SortOrderLessOrEqualThan?: number, SortOrderLessThan?: number, SortOrderSpecified?: boolean, Unpaged?: boolean, UserAttributeEquals?: boolean, UserAttributeIn?: Array<boolean>, UserAttributeSpecified?: boolean, UuidContains?: string, UuidEquals?: string, UuidIn?: Array<string>, UuidSpecified?: boolean, ValueTypeContains?: string, ValueTypeEquals?: string, ValueTypeIn?: Array<string>, ValueTypeSpecified?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Attribute>>>;
    public getAllAttributesUsingGET(CodeContains?: string, CodeEquals?: string, CodeIn?: Array<string>, CodeSpecified?: boolean, IdEquals?: number, IdGreaterOrEqualThan?: number, IdGreaterThan?: number, IdIn?: Array<number>, IdLessOrEqualThan?: number, IdLessThan?: number, IdSpecified?: boolean, MandatoryEquals?: boolean, MandatoryIn?: Array<boolean>, MandatorySpecified?: boolean, NameContains?: string, NameEquals?: string, NameIn?: Array<string>, NameSpecified?: boolean, Offset?: number, OptionSetIdEquals?: number, OptionSetIdGreaterOrEqualThan?: number, OptionSetIdGreaterThan?: number, OptionSetIdIn?: Array<number>, OptionSetIdLessOrEqualThan?: number, OptionSetIdLessThan?: number, OptionSetIdSpecified?: boolean, OrgUnitAttributeEquals?: boolean, OrgUnitAttributeIn?: Array<boolean>, OrgUnitAttributeSpecified?: boolean, OrgUnitGroupAttributeEquals?: boolean, OrgUnitGroupAttributeIn?: Array<boolean>, OrgUnitGroupAttributeSpecified?: boolean, OrgUnitGroupSetAttributeEquals?: boolean, OrgUnitGroupSetAttributeIn?: Array<boolean>, OrgUnitGroupSetAttributeSpecified?: boolean, Page?: number, PageNumber?: number, PageSize?: number, Paged?: boolean, Size?: number, Sort?: Array<string>, SortSorted?: boolean, SortUnsorted?: boolean, SortOrderEquals?: number, SortOrderGreaterOrEqualThan?: number, SortOrderGreaterThan?: number, SortOrderIn?: Array<number>, SortOrderLessOrEqualThan?: number, SortOrderLessThan?: number, SortOrderSpecified?: boolean, Unpaged?: boolean, UserAttributeEquals?: boolean, UserAttributeIn?: Array<boolean>, UserAttributeSpecified?: boolean, UuidContains?: string, UuidEquals?: string, UuidIn?: Array<string>, UuidSpecified?: boolean, ValueTypeContains?: string, ValueTypeEquals?: string, ValueTypeIn?: Array<string>, ValueTypeSpecified?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (CodeContains !== undefined && CodeContains !== null) {
            queryParameters = queryParameters.set('code.contains', <any>CodeContains);
        }
        if (CodeEquals !== undefined && CodeEquals !== null) {
            queryParameters = queryParameters.set('code.equals', <any>CodeEquals);
        }
        if (CodeIn) {
            CodeIn.forEach((element) => {
                queryParameters = queryParameters.append('code.in', <any>element);
            })
        }
        if (CodeSpecified !== undefined && CodeSpecified !== null) {
            queryParameters = queryParameters.set('code.specified', <any>CodeSpecified);
        }
        if (IdEquals !== undefined && IdEquals !== null) {
            queryParameters = queryParameters.set('id.equals', <any>IdEquals);
        }
        if (IdGreaterOrEqualThan !== undefined && IdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('id.greaterOrEqualThan', <any>IdGreaterOrEqualThan);
        }
        if (IdGreaterThan !== undefined && IdGreaterThan !== null) {
            queryParameters = queryParameters.set('id.greaterThan', <any>IdGreaterThan);
        }
        if (IdIn) {
            IdIn.forEach((element) => {
                queryParameters = queryParameters.append('id.in', <any>element);
            })
        }
        if (IdLessOrEqualThan !== undefined && IdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('id.lessOrEqualThan', <any>IdLessOrEqualThan);
        }
        if (IdLessThan !== undefined && IdLessThan !== null) {
            queryParameters = queryParameters.set('id.lessThan', <any>IdLessThan);
        }
        if (IdSpecified !== undefined && IdSpecified !== null) {
            queryParameters = queryParameters.set('id.specified', <any>IdSpecified);
        }
        if (MandatoryEquals !== undefined && MandatoryEquals !== null) {
            queryParameters = queryParameters.set('mandatory.equals', <any>MandatoryEquals);
        }
        if (MandatoryIn) {
            MandatoryIn.forEach((element) => {
                queryParameters = queryParameters.append('mandatory.in', <any>element);
            })
        }
        if (MandatorySpecified !== undefined && MandatorySpecified !== null) {
            queryParameters = queryParameters.set('mandatory.specified', <any>MandatorySpecified);
        }
        if (NameContains !== undefined && NameContains !== null) {
            queryParameters = queryParameters.set('name.contains', <any>NameContains);
        }
        if (NameEquals !== undefined && NameEquals !== null) {
            queryParameters = queryParameters.set('name.equals', <any>NameEquals);
        }
        if (NameIn) {
            NameIn.forEach((element) => {
                queryParameters = queryParameters.append('name.in', <any>element);
            })
        }
        if (NameSpecified !== undefined && NameSpecified !== null) {
            queryParameters = queryParameters.set('name.specified', <any>NameSpecified);
        }
        if (Offset !== undefined && Offset !== null) {
            queryParameters = queryParameters.set('offset', <any>Offset);
        }
        if (OptionSetIdEquals !== undefined && OptionSetIdEquals !== null) {
            queryParameters = queryParameters.set('optionSetId.equals', <any>OptionSetIdEquals);
        }
        if (OptionSetIdGreaterOrEqualThan !== undefined && OptionSetIdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('optionSetId.greaterOrEqualThan', <any>OptionSetIdGreaterOrEqualThan);
        }
        if (OptionSetIdGreaterThan !== undefined && OptionSetIdGreaterThan !== null) {
            queryParameters = queryParameters.set('optionSetId.greaterThan', <any>OptionSetIdGreaterThan);
        }
        if (OptionSetIdIn) {
            OptionSetIdIn.forEach((element) => {
                queryParameters = queryParameters.append('optionSetId.in', <any>element);
            })
        }
        if (OptionSetIdLessOrEqualThan !== undefined && OptionSetIdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('optionSetId.lessOrEqualThan', <any>OptionSetIdLessOrEqualThan);
        }
        if (OptionSetIdLessThan !== undefined && OptionSetIdLessThan !== null) {
            queryParameters = queryParameters.set('optionSetId.lessThan', <any>OptionSetIdLessThan);
        }
        if (OptionSetIdSpecified !== undefined && OptionSetIdSpecified !== null) {
            queryParameters = queryParameters.set('optionSetId.specified', <any>OptionSetIdSpecified);
        }
        if (OrgUnitAttributeEquals !== undefined && OrgUnitAttributeEquals !== null) {
            queryParameters = queryParameters.set('orgUnitAttribute.equals', <any>OrgUnitAttributeEquals);
        }
        if (OrgUnitAttributeIn) {
            OrgUnitAttributeIn.forEach((element) => {
                queryParameters = queryParameters.append('orgUnitAttribute.in', <any>element);
            })
        }
        if (OrgUnitAttributeSpecified !== undefined && OrgUnitAttributeSpecified !== null) {
            queryParameters = queryParameters.set('orgUnitAttribute.specified', <any>OrgUnitAttributeSpecified);
        }
        if (OrgUnitGroupAttributeEquals !== undefined && OrgUnitGroupAttributeEquals !== null) {
            queryParameters = queryParameters.set('orgUnitGroupAttribute.equals', <any>OrgUnitGroupAttributeEquals);
        }
        if (OrgUnitGroupAttributeIn) {
            OrgUnitGroupAttributeIn.forEach((element) => {
                queryParameters = queryParameters.append('orgUnitGroupAttribute.in', <any>element);
            })
        }
        if (OrgUnitGroupAttributeSpecified !== undefined && OrgUnitGroupAttributeSpecified !== null) {
            queryParameters = queryParameters.set('orgUnitGroupAttribute.specified', <any>OrgUnitGroupAttributeSpecified);
        }
        if (OrgUnitGroupSetAttributeEquals !== undefined && OrgUnitGroupSetAttributeEquals !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetAttribute.equals', <any>OrgUnitGroupSetAttributeEquals);
        }
        if (OrgUnitGroupSetAttributeIn) {
            OrgUnitGroupSetAttributeIn.forEach((element) => {
                queryParameters = queryParameters.append('orgUnitGroupSetAttribute.in', <any>element);
            })
        }
        if (OrgUnitGroupSetAttributeSpecified !== undefined && OrgUnitGroupSetAttributeSpecified !== null) {
            queryParameters = queryParameters.set('orgUnitGroupSetAttribute.specified', <any>OrgUnitGroupSetAttributeSpecified);
        }
        if (Page !== undefined && Page !== null) {
            queryParameters = queryParameters.set('page', <any>Page);
        }
        if (PageNumber !== undefined && PageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>PageNumber);
        }
        if (PageSize !== undefined && PageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>PageSize);
        }
        if (Paged !== undefined && Paged !== null) {
            queryParameters = queryParameters.set('paged', <any>Paged);
        }
        if (Size !== undefined && Size !== null) {
            queryParameters = queryParameters.set('size', <any>Size);
        }
        if (Sort) {
            Sort.forEach((element) => {
                queryParameters = queryParameters.append('sort', <any>element);
            })
        }
        if (SortSorted !== undefined && SortSorted !== null) {
            queryParameters = queryParameters.set('sort.sorted', <any>SortSorted);
        }
        if (SortUnsorted !== undefined && SortUnsorted !== null) {
            queryParameters = queryParameters.set('sort.unsorted', <any>SortUnsorted);
        }
        if (SortOrderEquals !== undefined && SortOrderEquals !== null) {
            queryParameters = queryParameters.set('sortOrder.equals', <any>SortOrderEquals);
        }
        if (SortOrderGreaterOrEqualThan !== undefined && SortOrderGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('sortOrder.greaterOrEqualThan', <any>SortOrderGreaterOrEqualThan);
        }
        if (SortOrderGreaterThan !== undefined && SortOrderGreaterThan !== null) {
            queryParameters = queryParameters.set('sortOrder.greaterThan', <any>SortOrderGreaterThan);
        }
        if (SortOrderIn) {
            SortOrderIn.forEach((element) => {
                queryParameters = queryParameters.append('sortOrder.in', <any>element);
            })
        }
        if (SortOrderLessOrEqualThan !== undefined && SortOrderLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('sortOrder.lessOrEqualThan', <any>SortOrderLessOrEqualThan);
        }
        if (SortOrderLessThan !== undefined && SortOrderLessThan !== null) {
            queryParameters = queryParameters.set('sortOrder.lessThan', <any>SortOrderLessThan);
        }
        if (SortOrderSpecified !== undefined && SortOrderSpecified !== null) {
            queryParameters = queryParameters.set('sortOrder.specified', <any>SortOrderSpecified);
        }
        if (Unpaged !== undefined && Unpaged !== null) {
            queryParameters = queryParameters.set('unpaged', <any>Unpaged);
        }
        if (UserAttributeEquals !== undefined && UserAttributeEquals !== null) {
            queryParameters = queryParameters.set('userAttribute.equals', <any>UserAttributeEquals);
        }
        if (UserAttributeIn) {
            UserAttributeIn.forEach((element) => {
                queryParameters = queryParameters.append('userAttribute.in', <any>element);
            })
        }
        if (UserAttributeSpecified !== undefined && UserAttributeSpecified !== null) {
            queryParameters = queryParameters.set('userAttribute.specified', <any>UserAttributeSpecified);
        }
        if (UuidContains !== undefined && UuidContains !== null) {
            queryParameters = queryParameters.set('uuid.contains', <any>UuidContains);
        }
        if (UuidEquals !== undefined && UuidEquals !== null) {
            queryParameters = queryParameters.set('uuid.equals', <any>UuidEquals);
        }
        if (UuidIn) {
            UuidIn.forEach((element) => {
                queryParameters = queryParameters.append('uuid.in', <any>element);
            })
        }
        if (UuidSpecified !== undefined && UuidSpecified !== null) {
            queryParameters = queryParameters.set('uuid.specified', <any>UuidSpecified);
        }
        if (ValueTypeContains !== undefined && ValueTypeContains !== null) {
            queryParameters = queryParameters.set('valueType.contains', <any>ValueTypeContains);
        }
        if (ValueTypeEquals !== undefined && ValueTypeEquals !== null) {
            queryParameters = queryParameters.set('valueType.equals', <any>ValueTypeEquals);
        }
        if (ValueTypeIn) {
            ValueTypeIn.forEach((element) => {
                queryParameters = queryParameters.append('valueType.in', <any>element);
            })
        }
        if (ValueTypeSpecified !== undefined && ValueTypeSpecified !== null) {
            queryParameters = queryParameters.set('valueType.specified', <any>ValueTypeSpecified);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Attribute>>(`${this.basePath}/api/attributes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAttribute
     * 
     * @param Id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAttributeUsingGET(Id: number, observe?: 'body', reportProgress?: boolean): Observable<Attribute>;
    public getAttributeUsingGET(Id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Attribute>>;
    public getAttributeUsingGET(Id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Attribute>>;
    public getAttributeUsingGET(Id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Id === null || Id === undefined) {
            throw new Error('Required parameter Id was null or undefined when calling getAttributeUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Attribute>(`${this.basePath}/api/attributes/${encodeURIComponent(String(Id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAttribute
     * 
     * @param Attribute attribute
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAttributeUsingPUT(Attribute: Attribute, observe?: 'body', reportProgress?: boolean): Observable<Attribute>;
    public updateAttributeUsingPUT(Attribute: Attribute, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Attribute>>;
    public updateAttributeUsingPUT(Attribute: Attribute, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Attribute>>;
    public updateAttributeUsingPUT(Attribute: Attribute, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Attribute === null || Attribute === undefined) {
            throw new Error('Required parameter Attribute was null or undefined when calling updateAttributeUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Attribute>(`${this.basePath}/api/attributes`,
            Attribute,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

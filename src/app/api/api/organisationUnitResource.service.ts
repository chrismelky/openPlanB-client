/**
 * server API
 * server API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { OrganisationUnit } from '../model/organisationUnit';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class OrganisationUnitResourceService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createOrganisationUnit
     * 
     * @param OrganisationUnit organisationUnit
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOrganisationUnitUsingPOST(OrganisationUnit: OrganisationUnit, observe?: 'body', reportProgress?: boolean): Observable<OrganisationUnit>;
    public createOrganisationUnitUsingPOST(OrganisationUnit: OrganisationUnit, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganisationUnit>>;
    public createOrganisationUnitUsingPOST(OrganisationUnit: OrganisationUnit, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganisationUnit>>;
    public createOrganisationUnitUsingPOST(OrganisationUnit: OrganisationUnit, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (OrganisationUnit === null || OrganisationUnit === undefined) {
            throw new Error('Required parameter OrganisationUnit was null or undefined when calling createOrganisationUnitUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<OrganisationUnit>(`${this.basePath}/api/organisation-units`,
            OrganisationUnit,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteOrganisationUnit
     * 
     * @param Id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganisationUnitUsingDELETE(Id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteOrganisationUnitUsingDELETE(Id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteOrganisationUnitUsingDELETE(Id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteOrganisationUnitUsingDELETE(Id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Id === null || Id === undefined) {
            throw new Error('Required parameter Id was null or undefined when calling deleteOrganisationUnitUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/organisation-units/${encodeURIComponent(String(Id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAllOrganisationUnits
     * 
     * @param AddressContains 
     * @param AddressEquals 
     * @param AddressIn 
     * @param AddressSpecified 
     * @param AttributeValuesIdEquals 
     * @param AttributeValuesIdGreaterOrEqualThan 
     * @param AttributeValuesIdGreaterThan 
     * @param AttributeValuesIdIn 
     * @param AttributeValuesIdLessOrEqualThan 
     * @param AttributeValuesIdLessThan 
     * @param AttributeValuesIdSpecified 
     * @param ClosedDateEquals 
     * @param ClosedDateGreaterOrEqualThan 
     * @param ClosedDateGreaterThan 
     * @param ClosedDateIn0ChronologyCalendarType 
     * @param ClosedDateIn0ChronologyId 
     * @param ClosedDateIn0DayOfMonth 
     * @param ClosedDateIn0DayOfWeek 
     * @param ClosedDateIn0DayOfYear 
     * @param ClosedDateIn0EraValue 
     * @param ClosedDateIn0LeapYear 
     * @param ClosedDateIn0Month 
     * @param ClosedDateIn0MonthValue 
     * @param ClosedDateIn0Year 
     * @param ClosedDateLessOrEqualThan 
     * @param ClosedDateLessThan 
     * @param ClosedDateSpecified 
     * @param CodeContains 
     * @param CodeEquals 
     * @param CodeIn 
     * @param CodeSpecified 
     * @param EmailContains 
     * @param EmailEquals 
     * @param EmailIn 
     * @param EmailSpecified 
     * @param IdEquals 
     * @param IdGreaterOrEqualThan 
     * @param IdGreaterThan 
     * @param IdIn 
     * @param IdLessOrEqualThan 
     * @param IdLessThan 
     * @param IdSpecified 
     * @param LatitudeEquals 
     * @param LatitudeGreaterOrEqualThan 
     * @param LatitudeGreaterThan 
     * @param LatitudeIn 
     * @param LatitudeLessOrEqualThan 
     * @param LatitudeLessThan 
     * @param LatitudeSpecified 
     * @param LongitudeEquals 
     * @param LongitudeGreaterOrEqualThan 
     * @param LongitudeGreaterThan 
     * @param LongitudeIn 
     * @param LongitudeLessOrEqualThan 
     * @param LongitudeLessThan 
     * @param LongitudeSpecified 
     * @param NameContains 
     * @param NameEquals 
     * @param NameIn 
     * @param NameSpecified 
     * @param Offset 
     * @param OpeningDateEquals 
     * @param OpeningDateGreaterOrEqualThan 
     * @param OpeningDateGreaterThan 
     * @param OpeningDateIn0ChronologyCalendarType 
     * @param OpeningDateIn0ChronologyId 
     * @param OpeningDateIn0DayOfMonth 
     * @param OpeningDateIn0DayOfWeek 
     * @param OpeningDateIn0DayOfYear 
     * @param OpeningDateIn0EraValue 
     * @param OpeningDateIn0LeapYear 
     * @param OpeningDateIn0Month 
     * @param OpeningDateIn0MonthValue 
     * @param OpeningDateIn0Year 
     * @param OpeningDateLessOrEqualThan 
     * @param OpeningDateLessThan 
     * @param OpeningDateSpecified 
     * @param OrgUnitGroupIdEquals 
     * @param OrgUnitGroupIdGreaterOrEqualThan 
     * @param OrgUnitGroupIdGreaterThan 
     * @param OrgUnitGroupIdIn 
     * @param OrgUnitGroupIdLessOrEqualThan 
     * @param OrgUnitGroupIdLessThan 
     * @param OrgUnitGroupIdSpecified 
     * @param Page Page number of the requested page
     * @param PageNumber 
     * @param PageSize 
     * @param Paged 
     * @param ParentIdEquals 
     * @param ParentIdGreaterOrEqualThan 
     * @param ParentIdGreaterThan 
     * @param ParentIdIn 
     * @param ParentIdLessOrEqualThan 
     * @param ParentIdLessThan 
     * @param ParentIdSpecified 
     * @param PhoneNumnerContains 
     * @param PhoneNumnerEquals 
     * @param PhoneNumnerIn 
     * @param PhoneNumnerSpecified 
     * @param Size Size of a page
     * @param Sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param SortSorted 
     * @param SortUnsorted 
     * @param Unpaged 
     * @param UrlContains 
     * @param UrlEquals 
     * @param UrlIn 
     * @param UrlSpecified 
     * @param UuidContains 
     * @param UuidEquals 
     * @param UuidIn 
     * @param UuidSpecified 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllOrganisationUnitsUsingGET(AddressContains?: string, AddressEquals?: string, AddressIn?: Array<string>, AddressSpecified?: boolean, AttributeValuesIdEquals?: number, AttributeValuesIdGreaterOrEqualThan?: number, AttributeValuesIdGreaterThan?: number, AttributeValuesIdIn?: Array<number>, AttributeValuesIdLessOrEqualThan?: number, AttributeValuesIdLessThan?: number, AttributeValuesIdSpecified?: boolean, ClosedDateEquals?: string, ClosedDateGreaterOrEqualThan?: string, ClosedDateGreaterThan?: string, ClosedDateIn0ChronologyCalendarType?: string, ClosedDateIn0ChronologyId?: string, ClosedDateIn0DayOfMonth?: number, ClosedDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', ClosedDateIn0DayOfYear?: number, ClosedDateIn0EraValue?: number, ClosedDateIn0LeapYear?: boolean, ClosedDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', ClosedDateIn0MonthValue?: number, ClosedDateIn0Year?: number, ClosedDateLessOrEqualThan?: string, ClosedDateLessThan?: string, ClosedDateSpecified?: boolean, CodeContains?: string, CodeEquals?: string, CodeIn?: Array<string>, CodeSpecified?: boolean, EmailContains?: string, EmailEquals?: string, EmailIn?: Array<string>, EmailSpecified?: boolean, IdEquals?: number, IdGreaterOrEqualThan?: number, IdGreaterThan?: number, IdIn?: Array<number>, IdLessOrEqualThan?: number, IdLessThan?: number, IdSpecified?: boolean, LatitudeEquals?: number, LatitudeGreaterOrEqualThan?: number, LatitudeGreaterThan?: number, LatitudeIn?: Array<number>, LatitudeLessOrEqualThan?: number, LatitudeLessThan?: number, LatitudeSpecified?: boolean, LongitudeEquals?: number, LongitudeGreaterOrEqualThan?: number, LongitudeGreaterThan?: number, LongitudeIn?: Array<number>, LongitudeLessOrEqualThan?: number, LongitudeLessThan?: number, LongitudeSpecified?: boolean, NameContains?: string, NameEquals?: string, NameIn?: Array<string>, NameSpecified?: boolean, Offset?: number, OpeningDateEquals?: string, OpeningDateGreaterOrEqualThan?: string, OpeningDateGreaterThan?: string, OpeningDateIn0ChronologyCalendarType?: string, OpeningDateIn0ChronologyId?: string, OpeningDateIn0DayOfMonth?: number, OpeningDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', OpeningDateIn0DayOfYear?: number, OpeningDateIn0EraValue?: number, OpeningDateIn0LeapYear?: boolean, OpeningDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', OpeningDateIn0MonthValue?: number, OpeningDateIn0Year?: number, OpeningDateLessOrEqualThan?: string, OpeningDateLessThan?: string, OpeningDateSpecified?: boolean, OrgUnitGroupIdEquals?: number, OrgUnitGroupIdGreaterOrEqualThan?: number, OrgUnitGroupIdGreaterThan?: number, OrgUnitGroupIdIn?: Array<number>, OrgUnitGroupIdLessOrEqualThan?: number, OrgUnitGroupIdLessThan?: number, OrgUnitGroupIdSpecified?: boolean, Page?: number, PageNumber?: number, PageSize?: number, Paged?: boolean, ParentIdEquals?: number, ParentIdGreaterOrEqualThan?: number, ParentIdGreaterThan?: number, ParentIdIn?: Array<number>, ParentIdLessOrEqualThan?: number, ParentIdLessThan?: number, ParentIdSpecified?: boolean, PhoneNumnerContains?: string, PhoneNumnerEquals?: string, PhoneNumnerIn?: Array<string>, PhoneNumnerSpecified?: boolean, Size?: number, Sort?: Array<string>, SortSorted?: boolean, SortUnsorted?: boolean, Unpaged?: boolean, UrlContains?: string, UrlEquals?: string, UrlIn?: Array<string>, UrlSpecified?: boolean, UuidContains?: string, UuidEquals?: string, UuidIn?: Array<string>, UuidSpecified?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<OrganisationUnit>>;
    public getAllOrganisationUnitsUsingGET(AddressContains?: string, AddressEquals?: string, AddressIn?: Array<string>, AddressSpecified?: boolean, AttributeValuesIdEquals?: number, AttributeValuesIdGreaterOrEqualThan?: number, AttributeValuesIdGreaterThan?: number, AttributeValuesIdIn?: Array<number>, AttributeValuesIdLessOrEqualThan?: number, AttributeValuesIdLessThan?: number, AttributeValuesIdSpecified?: boolean, ClosedDateEquals?: string, ClosedDateGreaterOrEqualThan?: string, ClosedDateGreaterThan?: string, ClosedDateIn0ChronologyCalendarType?: string, ClosedDateIn0ChronologyId?: string, ClosedDateIn0DayOfMonth?: number, ClosedDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', ClosedDateIn0DayOfYear?: number, ClosedDateIn0EraValue?: number, ClosedDateIn0LeapYear?: boolean, ClosedDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', ClosedDateIn0MonthValue?: number, ClosedDateIn0Year?: number, ClosedDateLessOrEqualThan?: string, ClosedDateLessThan?: string, ClosedDateSpecified?: boolean, CodeContains?: string, CodeEquals?: string, CodeIn?: Array<string>, CodeSpecified?: boolean, EmailContains?: string, EmailEquals?: string, EmailIn?: Array<string>, EmailSpecified?: boolean, IdEquals?: number, IdGreaterOrEqualThan?: number, IdGreaterThan?: number, IdIn?: Array<number>, IdLessOrEqualThan?: number, IdLessThan?: number, IdSpecified?: boolean, LatitudeEquals?: number, LatitudeGreaterOrEqualThan?: number, LatitudeGreaterThan?: number, LatitudeIn?: Array<number>, LatitudeLessOrEqualThan?: number, LatitudeLessThan?: number, LatitudeSpecified?: boolean, LongitudeEquals?: number, LongitudeGreaterOrEqualThan?: number, LongitudeGreaterThan?: number, LongitudeIn?: Array<number>, LongitudeLessOrEqualThan?: number, LongitudeLessThan?: number, LongitudeSpecified?: boolean, NameContains?: string, NameEquals?: string, NameIn?: Array<string>, NameSpecified?: boolean, Offset?: number, OpeningDateEquals?: string, OpeningDateGreaterOrEqualThan?: string, OpeningDateGreaterThan?: string, OpeningDateIn0ChronologyCalendarType?: string, OpeningDateIn0ChronologyId?: string, OpeningDateIn0DayOfMonth?: number, OpeningDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', OpeningDateIn0DayOfYear?: number, OpeningDateIn0EraValue?: number, OpeningDateIn0LeapYear?: boolean, OpeningDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', OpeningDateIn0MonthValue?: number, OpeningDateIn0Year?: number, OpeningDateLessOrEqualThan?: string, OpeningDateLessThan?: string, OpeningDateSpecified?: boolean, OrgUnitGroupIdEquals?: number, OrgUnitGroupIdGreaterOrEqualThan?: number, OrgUnitGroupIdGreaterThan?: number, OrgUnitGroupIdIn?: Array<number>, OrgUnitGroupIdLessOrEqualThan?: number, OrgUnitGroupIdLessThan?: number, OrgUnitGroupIdSpecified?: boolean, Page?: number, PageNumber?: number, PageSize?: number, Paged?: boolean, ParentIdEquals?: number, ParentIdGreaterOrEqualThan?: number, ParentIdGreaterThan?: number, ParentIdIn?: Array<number>, ParentIdLessOrEqualThan?: number, ParentIdLessThan?: number, ParentIdSpecified?: boolean, PhoneNumnerContains?: string, PhoneNumnerEquals?: string, PhoneNumnerIn?: Array<string>, PhoneNumnerSpecified?: boolean, Size?: number, Sort?: Array<string>, SortSorted?: boolean, SortUnsorted?: boolean, Unpaged?: boolean, UrlContains?: string, UrlEquals?: string, UrlIn?: Array<string>, UrlSpecified?: boolean, UuidContains?: string, UuidEquals?: string, UuidIn?: Array<string>, UuidSpecified?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrganisationUnit>>>;
    public getAllOrganisationUnitsUsingGET(AddressContains?: string, AddressEquals?: string, AddressIn?: Array<string>, AddressSpecified?: boolean, AttributeValuesIdEquals?: number, AttributeValuesIdGreaterOrEqualThan?: number, AttributeValuesIdGreaterThan?: number, AttributeValuesIdIn?: Array<number>, AttributeValuesIdLessOrEqualThan?: number, AttributeValuesIdLessThan?: number, AttributeValuesIdSpecified?: boolean, ClosedDateEquals?: string, ClosedDateGreaterOrEqualThan?: string, ClosedDateGreaterThan?: string, ClosedDateIn0ChronologyCalendarType?: string, ClosedDateIn0ChronologyId?: string, ClosedDateIn0DayOfMonth?: number, ClosedDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', ClosedDateIn0DayOfYear?: number, ClosedDateIn0EraValue?: number, ClosedDateIn0LeapYear?: boolean, ClosedDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', ClosedDateIn0MonthValue?: number, ClosedDateIn0Year?: number, ClosedDateLessOrEqualThan?: string, ClosedDateLessThan?: string, ClosedDateSpecified?: boolean, CodeContains?: string, CodeEquals?: string, CodeIn?: Array<string>, CodeSpecified?: boolean, EmailContains?: string, EmailEquals?: string, EmailIn?: Array<string>, EmailSpecified?: boolean, IdEquals?: number, IdGreaterOrEqualThan?: number, IdGreaterThan?: number, IdIn?: Array<number>, IdLessOrEqualThan?: number, IdLessThan?: number, IdSpecified?: boolean, LatitudeEquals?: number, LatitudeGreaterOrEqualThan?: number, LatitudeGreaterThan?: number, LatitudeIn?: Array<number>, LatitudeLessOrEqualThan?: number, LatitudeLessThan?: number, LatitudeSpecified?: boolean, LongitudeEquals?: number, LongitudeGreaterOrEqualThan?: number, LongitudeGreaterThan?: number, LongitudeIn?: Array<number>, LongitudeLessOrEqualThan?: number, LongitudeLessThan?: number, LongitudeSpecified?: boolean, NameContains?: string, NameEquals?: string, NameIn?: Array<string>, NameSpecified?: boolean, Offset?: number, OpeningDateEquals?: string, OpeningDateGreaterOrEqualThan?: string, OpeningDateGreaterThan?: string, OpeningDateIn0ChronologyCalendarType?: string, OpeningDateIn0ChronologyId?: string, OpeningDateIn0DayOfMonth?: number, OpeningDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', OpeningDateIn0DayOfYear?: number, OpeningDateIn0EraValue?: number, OpeningDateIn0LeapYear?: boolean, OpeningDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', OpeningDateIn0MonthValue?: number, OpeningDateIn0Year?: number, OpeningDateLessOrEqualThan?: string, OpeningDateLessThan?: string, OpeningDateSpecified?: boolean, OrgUnitGroupIdEquals?: number, OrgUnitGroupIdGreaterOrEqualThan?: number, OrgUnitGroupIdGreaterThan?: number, OrgUnitGroupIdIn?: Array<number>, OrgUnitGroupIdLessOrEqualThan?: number, OrgUnitGroupIdLessThan?: number, OrgUnitGroupIdSpecified?: boolean, Page?: number, PageNumber?: number, PageSize?: number, Paged?: boolean, ParentIdEquals?: number, ParentIdGreaterOrEqualThan?: number, ParentIdGreaterThan?: number, ParentIdIn?: Array<number>, ParentIdLessOrEqualThan?: number, ParentIdLessThan?: number, ParentIdSpecified?: boolean, PhoneNumnerContains?: string, PhoneNumnerEquals?: string, PhoneNumnerIn?: Array<string>, PhoneNumnerSpecified?: boolean, Size?: number, Sort?: Array<string>, SortSorted?: boolean, SortUnsorted?: boolean, Unpaged?: boolean, UrlContains?: string, UrlEquals?: string, UrlIn?: Array<string>, UrlSpecified?: boolean, UuidContains?: string, UuidEquals?: string, UuidIn?: Array<string>, UuidSpecified?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrganisationUnit>>>;
    public getAllOrganisationUnitsUsingGET(AddressContains?: string, AddressEquals?: string, AddressIn?: Array<string>, AddressSpecified?: boolean, AttributeValuesIdEquals?: number, AttributeValuesIdGreaterOrEqualThan?: number, AttributeValuesIdGreaterThan?: number, AttributeValuesIdIn?: Array<number>, AttributeValuesIdLessOrEqualThan?: number, AttributeValuesIdLessThan?: number, AttributeValuesIdSpecified?: boolean, ClosedDateEquals?: string, ClosedDateGreaterOrEqualThan?: string, ClosedDateGreaterThan?: string, ClosedDateIn0ChronologyCalendarType?: string, ClosedDateIn0ChronologyId?: string, ClosedDateIn0DayOfMonth?: number, ClosedDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', ClosedDateIn0DayOfYear?: number, ClosedDateIn0EraValue?: number, ClosedDateIn0LeapYear?: boolean, ClosedDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', ClosedDateIn0MonthValue?: number, ClosedDateIn0Year?: number, ClosedDateLessOrEqualThan?: string, ClosedDateLessThan?: string, ClosedDateSpecified?: boolean, CodeContains?: string, CodeEquals?: string, CodeIn?: Array<string>, CodeSpecified?: boolean, EmailContains?: string, EmailEquals?: string, EmailIn?: Array<string>, EmailSpecified?: boolean, IdEquals?: number, IdGreaterOrEqualThan?: number, IdGreaterThan?: number, IdIn?: Array<number>, IdLessOrEqualThan?: number, IdLessThan?: number, IdSpecified?: boolean, LatitudeEquals?: number, LatitudeGreaterOrEqualThan?: number, LatitudeGreaterThan?: number, LatitudeIn?: Array<number>, LatitudeLessOrEqualThan?: number, LatitudeLessThan?: number, LatitudeSpecified?: boolean, LongitudeEquals?: number, LongitudeGreaterOrEqualThan?: number, LongitudeGreaterThan?: number, LongitudeIn?: Array<number>, LongitudeLessOrEqualThan?: number, LongitudeLessThan?: number, LongitudeSpecified?: boolean, NameContains?: string, NameEquals?: string, NameIn?: Array<string>, NameSpecified?: boolean, Offset?: number, OpeningDateEquals?: string, OpeningDateGreaterOrEqualThan?: string, OpeningDateGreaterThan?: string, OpeningDateIn0ChronologyCalendarType?: string, OpeningDateIn0ChronologyId?: string, OpeningDateIn0DayOfMonth?: number, OpeningDateIn0DayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY', OpeningDateIn0DayOfYear?: number, OpeningDateIn0EraValue?: number, OpeningDateIn0LeapYear?: boolean, OpeningDateIn0Month?: 'JANUARY' | 'FEBRUARY' | 'MARCH' | 'APRIL' | 'MAY' | 'JUNE' | 'JULY' | 'AUGUST' | 'SEPTEMBER' | 'OCTOBER' | 'NOVEMBER' | 'DECEMBER', OpeningDateIn0MonthValue?: number, OpeningDateIn0Year?: number, OpeningDateLessOrEqualThan?: string, OpeningDateLessThan?: string, OpeningDateSpecified?: boolean, OrgUnitGroupIdEquals?: number, OrgUnitGroupIdGreaterOrEqualThan?: number, OrgUnitGroupIdGreaterThan?: number, OrgUnitGroupIdIn?: Array<number>, OrgUnitGroupIdLessOrEqualThan?: number, OrgUnitGroupIdLessThan?: number, OrgUnitGroupIdSpecified?: boolean, Page?: number, PageNumber?: number, PageSize?: number, Paged?: boolean, ParentIdEquals?: number, ParentIdGreaterOrEqualThan?: number, ParentIdGreaterThan?: number, ParentIdIn?: Array<number>, ParentIdLessOrEqualThan?: number, ParentIdLessThan?: number, ParentIdSpecified?: boolean, PhoneNumnerContains?: string, PhoneNumnerEquals?: string, PhoneNumnerIn?: Array<string>, PhoneNumnerSpecified?: boolean, Size?: number, Sort?: Array<string>, SortSorted?: boolean, SortUnsorted?: boolean, Unpaged?: boolean, UrlContains?: string, UrlEquals?: string, UrlIn?: Array<string>, UrlSpecified?: boolean, UuidContains?: string, UuidEquals?: string, UuidIn?: Array<string>, UuidSpecified?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

















































































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (AddressContains !== undefined && AddressContains !== null) {
            queryParameters = queryParameters.set('address.contains', <any>AddressContains);
        }
        if (AddressEquals !== undefined && AddressEquals !== null) {
            queryParameters = queryParameters.set('address.equals', <any>AddressEquals);
        }
        if (AddressIn) {
            AddressIn.forEach((element) => {
                queryParameters = queryParameters.append('address.in', <any>element);
            })
        }
        if (AddressSpecified !== undefined && AddressSpecified !== null) {
            queryParameters = queryParameters.set('address.specified', <any>AddressSpecified);
        }
        if (AttributeValuesIdEquals !== undefined && AttributeValuesIdEquals !== null) {
            queryParameters = queryParameters.set('attributeValuesId.equals', <any>AttributeValuesIdEquals);
        }
        if (AttributeValuesIdGreaterOrEqualThan !== undefined && AttributeValuesIdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.greaterOrEqualThan', <any>AttributeValuesIdGreaterOrEqualThan);
        }
        if (AttributeValuesIdGreaterThan !== undefined && AttributeValuesIdGreaterThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.greaterThan', <any>AttributeValuesIdGreaterThan);
        }
        if (AttributeValuesIdIn) {
            AttributeValuesIdIn.forEach((element) => {
                queryParameters = queryParameters.append('attributeValuesId.in', <any>element);
            })
        }
        if (AttributeValuesIdLessOrEqualThan !== undefined && AttributeValuesIdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.lessOrEqualThan', <any>AttributeValuesIdLessOrEqualThan);
        }
        if (AttributeValuesIdLessThan !== undefined && AttributeValuesIdLessThan !== null) {
            queryParameters = queryParameters.set('attributeValuesId.lessThan', <any>AttributeValuesIdLessThan);
        }
        if (AttributeValuesIdSpecified !== undefined && AttributeValuesIdSpecified !== null) {
            queryParameters = queryParameters.set('attributeValuesId.specified', <any>AttributeValuesIdSpecified);
        }
        if (ClosedDateEquals !== undefined && ClosedDateEquals !== null) {
            queryParameters = queryParameters.set('closedDate.equals', <any>ClosedDateEquals);
        }
        if (ClosedDateGreaterOrEqualThan !== undefined && ClosedDateGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('closedDate.greaterOrEqualThan', <any>ClosedDateGreaterOrEqualThan);
        }
        if (ClosedDateGreaterThan !== undefined && ClosedDateGreaterThan !== null) {
            queryParameters = queryParameters.set('closedDate.greaterThan', <any>ClosedDateGreaterThan);
        }
        if (ClosedDateIn0ChronologyCalendarType !== undefined && ClosedDateIn0ChronologyCalendarType !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].chronology.calendarType', <any>ClosedDateIn0ChronologyCalendarType);
        }
        if (ClosedDateIn0ChronologyId !== undefined && ClosedDateIn0ChronologyId !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].chronology.id', <any>ClosedDateIn0ChronologyId);
        }
        if (ClosedDateIn0DayOfMonth !== undefined && ClosedDateIn0DayOfMonth !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].dayOfMonth', <any>ClosedDateIn0DayOfMonth);
        }
        if (ClosedDateIn0DayOfWeek !== undefined && ClosedDateIn0DayOfWeek !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].dayOfWeek', <any>ClosedDateIn0DayOfWeek);
        }
        if (ClosedDateIn0DayOfYear !== undefined && ClosedDateIn0DayOfYear !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].dayOfYear', <any>ClosedDateIn0DayOfYear);
        }
        if (ClosedDateIn0EraValue !== undefined && ClosedDateIn0EraValue !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].era.value', <any>ClosedDateIn0EraValue);
        }
        if (ClosedDateIn0LeapYear !== undefined && ClosedDateIn0LeapYear !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].leapYear', <any>ClosedDateIn0LeapYear);
        }
        if (ClosedDateIn0Month !== undefined && ClosedDateIn0Month !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].month', <any>ClosedDateIn0Month);
        }
        if (ClosedDateIn0MonthValue !== undefined && ClosedDateIn0MonthValue !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].monthValue', <any>ClosedDateIn0MonthValue);
        }
        if (ClosedDateIn0Year !== undefined && ClosedDateIn0Year !== null) {
            queryParameters = queryParameters.set('closedDate.in[0].year', <any>ClosedDateIn0Year);
        }
        if (ClosedDateLessOrEqualThan !== undefined && ClosedDateLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('closedDate.lessOrEqualThan', <any>ClosedDateLessOrEqualThan);
        }
        if (ClosedDateLessThan !== undefined && ClosedDateLessThan !== null) {
            queryParameters = queryParameters.set('closedDate.lessThan', <any>ClosedDateLessThan);
        }
        if (ClosedDateSpecified !== undefined && ClosedDateSpecified !== null) {
            queryParameters = queryParameters.set('closedDate.specified', <any>ClosedDateSpecified);
        }
        if (CodeContains !== undefined && CodeContains !== null) {
            queryParameters = queryParameters.set('code.contains', <any>CodeContains);
        }
        if (CodeEquals !== undefined && CodeEquals !== null) {
            queryParameters = queryParameters.set('code.equals', <any>CodeEquals);
        }
        if (CodeIn) {
            CodeIn.forEach((element) => {
                queryParameters = queryParameters.append('code.in', <any>element);
            })
        }
        if (CodeSpecified !== undefined && CodeSpecified !== null) {
            queryParameters = queryParameters.set('code.specified', <any>CodeSpecified);
        }
        if (EmailContains !== undefined && EmailContains !== null) {
            queryParameters = queryParameters.set('email.contains', <any>EmailContains);
        }
        if (EmailEquals !== undefined && EmailEquals !== null) {
            queryParameters = queryParameters.set('email.equals', <any>EmailEquals);
        }
        if (EmailIn) {
            EmailIn.forEach((element) => {
                queryParameters = queryParameters.append('email.in', <any>element);
            })
        }
        if (EmailSpecified !== undefined && EmailSpecified !== null) {
            queryParameters = queryParameters.set('email.specified', <any>EmailSpecified);
        }
        if (IdEquals !== undefined && IdEquals !== null) {
            queryParameters = queryParameters.set('id.equals', <any>IdEquals);
        }
        if (IdGreaterOrEqualThan !== undefined && IdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('id.greaterOrEqualThan', <any>IdGreaterOrEqualThan);
        }
        if (IdGreaterThan !== undefined && IdGreaterThan !== null) {
            queryParameters = queryParameters.set('id.greaterThan', <any>IdGreaterThan);
        }
        if (IdIn) {
            IdIn.forEach((element) => {
                queryParameters = queryParameters.append('id.in', <any>element);
            })
        }
        if (IdLessOrEqualThan !== undefined && IdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('id.lessOrEqualThan', <any>IdLessOrEqualThan);
        }
        if (IdLessThan !== undefined && IdLessThan !== null) {
            queryParameters = queryParameters.set('id.lessThan', <any>IdLessThan);
        }
        if (IdSpecified !== undefined && IdSpecified !== null) {
            queryParameters = queryParameters.set('id.specified', <any>IdSpecified);
        }
        if (LatitudeEquals !== undefined && LatitudeEquals !== null) {
            queryParameters = queryParameters.set('latitude.equals', <any>LatitudeEquals);
        }
        if (LatitudeGreaterOrEqualThan !== undefined && LatitudeGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('latitude.greaterOrEqualThan', <any>LatitudeGreaterOrEqualThan);
        }
        if (LatitudeGreaterThan !== undefined && LatitudeGreaterThan !== null) {
            queryParameters = queryParameters.set('latitude.greaterThan', <any>LatitudeGreaterThan);
        }
        if (LatitudeIn) {
            LatitudeIn.forEach((element) => {
                queryParameters = queryParameters.append('latitude.in', <any>element);
            })
        }
        if (LatitudeLessOrEqualThan !== undefined && LatitudeLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('latitude.lessOrEqualThan', <any>LatitudeLessOrEqualThan);
        }
        if (LatitudeLessThan !== undefined && LatitudeLessThan !== null) {
            queryParameters = queryParameters.set('latitude.lessThan', <any>LatitudeLessThan);
        }
        if (LatitudeSpecified !== undefined && LatitudeSpecified !== null) {
            queryParameters = queryParameters.set('latitude.specified', <any>LatitudeSpecified);
        }
        if (LongitudeEquals !== undefined && LongitudeEquals !== null) {
            queryParameters = queryParameters.set('longitude.equals', <any>LongitudeEquals);
        }
        if (LongitudeGreaterOrEqualThan !== undefined && LongitudeGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('longitude.greaterOrEqualThan', <any>LongitudeGreaterOrEqualThan);
        }
        if (LongitudeGreaterThan !== undefined && LongitudeGreaterThan !== null) {
            queryParameters = queryParameters.set('longitude.greaterThan', <any>LongitudeGreaterThan);
        }
        if (LongitudeIn) {
            LongitudeIn.forEach((element) => {
                queryParameters = queryParameters.append('longitude.in', <any>element);
            })
        }
        if (LongitudeLessOrEqualThan !== undefined && LongitudeLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('longitude.lessOrEqualThan', <any>LongitudeLessOrEqualThan);
        }
        if (LongitudeLessThan !== undefined && LongitudeLessThan !== null) {
            queryParameters = queryParameters.set('longitude.lessThan', <any>LongitudeLessThan);
        }
        if (LongitudeSpecified !== undefined && LongitudeSpecified !== null) {
            queryParameters = queryParameters.set('longitude.specified', <any>LongitudeSpecified);
        }
        if (NameContains !== undefined && NameContains !== null) {
            queryParameters = queryParameters.set('name.contains', <any>NameContains);
        }
        if (NameEquals !== undefined && NameEquals !== null) {
            queryParameters = queryParameters.set('name.equals', <any>NameEquals);
        }
        if (NameIn) {
            NameIn.forEach((element) => {
                queryParameters = queryParameters.append('name.in', <any>element);
            })
        }
        if (NameSpecified !== undefined && NameSpecified !== null) {
            queryParameters = queryParameters.set('name.specified', <any>NameSpecified);
        }
        if (Offset !== undefined && Offset !== null) {
            queryParameters = queryParameters.set('offset', <any>Offset);
        }
        if (OpeningDateEquals !== undefined && OpeningDateEquals !== null) {
            queryParameters = queryParameters.set('openingDate.equals', <any>OpeningDateEquals);
        }
        if (OpeningDateGreaterOrEqualThan !== undefined && OpeningDateGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('openingDate.greaterOrEqualThan', <any>OpeningDateGreaterOrEqualThan);
        }
        if (OpeningDateGreaterThan !== undefined && OpeningDateGreaterThan !== null) {
            queryParameters = queryParameters.set('openingDate.greaterThan', <any>OpeningDateGreaterThan);
        }
        if (OpeningDateIn0ChronologyCalendarType !== undefined && OpeningDateIn0ChronologyCalendarType !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].chronology.calendarType', <any>OpeningDateIn0ChronologyCalendarType);
        }
        if (OpeningDateIn0ChronologyId !== undefined && OpeningDateIn0ChronologyId !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].chronology.id', <any>OpeningDateIn0ChronologyId);
        }
        if (OpeningDateIn0DayOfMonth !== undefined && OpeningDateIn0DayOfMonth !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].dayOfMonth', <any>OpeningDateIn0DayOfMonth);
        }
        if (OpeningDateIn0DayOfWeek !== undefined && OpeningDateIn0DayOfWeek !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].dayOfWeek', <any>OpeningDateIn0DayOfWeek);
        }
        if (OpeningDateIn0DayOfYear !== undefined && OpeningDateIn0DayOfYear !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].dayOfYear', <any>OpeningDateIn0DayOfYear);
        }
        if (OpeningDateIn0EraValue !== undefined && OpeningDateIn0EraValue !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].era.value', <any>OpeningDateIn0EraValue);
        }
        if (OpeningDateIn0LeapYear !== undefined && OpeningDateIn0LeapYear !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].leapYear', <any>OpeningDateIn0LeapYear);
        }
        if (OpeningDateIn0Month !== undefined && OpeningDateIn0Month !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].month', <any>OpeningDateIn0Month);
        }
        if (OpeningDateIn0MonthValue !== undefined && OpeningDateIn0MonthValue !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].monthValue', <any>OpeningDateIn0MonthValue);
        }
        if (OpeningDateIn0Year !== undefined && OpeningDateIn0Year !== null) {
            queryParameters = queryParameters.set('openingDate.in[0].year', <any>OpeningDateIn0Year);
        }
        if (OpeningDateLessOrEqualThan !== undefined && OpeningDateLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('openingDate.lessOrEqualThan', <any>OpeningDateLessOrEqualThan);
        }
        if (OpeningDateLessThan !== undefined && OpeningDateLessThan !== null) {
            queryParameters = queryParameters.set('openingDate.lessThan', <any>OpeningDateLessThan);
        }
        if (OpeningDateSpecified !== undefined && OpeningDateSpecified !== null) {
            queryParameters = queryParameters.set('openingDate.specified', <any>OpeningDateSpecified);
        }
        if (OrgUnitGroupIdEquals !== undefined && OrgUnitGroupIdEquals !== null) {
            queryParameters = queryParameters.set('orgUnitGroupId.equals', <any>OrgUnitGroupIdEquals);
        }
        if (OrgUnitGroupIdGreaterOrEqualThan !== undefined && OrgUnitGroupIdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupId.greaterOrEqualThan', <any>OrgUnitGroupIdGreaterOrEqualThan);
        }
        if (OrgUnitGroupIdGreaterThan !== undefined && OrgUnitGroupIdGreaterThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupId.greaterThan', <any>OrgUnitGroupIdGreaterThan);
        }
        if (OrgUnitGroupIdIn) {
            OrgUnitGroupIdIn.forEach((element) => {
                queryParameters = queryParameters.append('orgUnitGroupId.in', <any>element);
            })
        }
        if (OrgUnitGroupIdLessOrEqualThan !== undefined && OrgUnitGroupIdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupId.lessOrEqualThan', <any>OrgUnitGroupIdLessOrEqualThan);
        }
        if (OrgUnitGroupIdLessThan !== undefined && OrgUnitGroupIdLessThan !== null) {
            queryParameters = queryParameters.set('orgUnitGroupId.lessThan', <any>OrgUnitGroupIdLessThan);
        }
        if (OrgUnitGroupIdSpecified !== undefined && OrgUnitGroupIdSpecified !== null) {
            queryParameters = queryParameters.set('orgUnitGroupId.specified', <any>OrgUnitGroupIdSpecified);
        }
        if (Page !== undefined && Page !== null) {
            queryParameters = queryParameters.set('page', <any>Page);
        }
        if (PageNumber !== undefined && PageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>PageNumber);
        }
        if (PageSize !== undefined && PageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>PageSize);
        }
        if (Paged !== undefined && Paged !== null) {
            queryParameters = queryParameters.set('paged', <any>Paged);
        }
        if (ParentIdEquals !== undefined && ParentIdEquals !== null) {
            queryParameters = queryParameters.set('parentId.equals', <any>ParentIdEquals);
        }
        if (ParentIdGreaterOrEqualThan !== undefined && ParentIdGreaterOrEqualThan !== null) {
            queryParameters = queryParameters.set('parentId.greaterOrEqualThan', <any>ParentIdGreaterOrEqualThan);
        }
        if (ParentIdGreaterThan !== undefined && ParentIdGreaterThan !== null) {
            queryParameters = queryParameters.set('parentId.greaterThan', <any>ParentIdGreaterThan);
        }
        if (ParentIdIn) {
            ParentIdIn.forEach((element) => {
                queryParameters = queryParameters.append('parentId.in', <any>element);
            })
        }
        if (ParentIdLessOrEqualThan !== undefined && ParentIdLessOrEqualThan !== null) {
            queryParameters = queryParameters.set('parentId.lessOrEqualThan', <any>ParentIdLessOrEqualThan);
        }
        if (ParentIdLessThan !== undefined && ParentIdLessThan !== null) {
            queryParameters = queryParameters.set('parentId.lessThan', <any>ParentIdLessThan);
        }
        if (ParentIdSpecified !== undefined && ParentIdSpecified !== null) {
            queryParameters = queryParameters.set('parentId.specified', <any>ParentIdSpecified);
        }
        if (PhoneNumnerContains !== undefined && PhoneNumnerContains !== null) {
            queryParameters = queryParameters.set('phoneNumner.contains', <any>PhoneNumnerContains);
        }
        if (PhoneNumnerEquals !== undefined && PhoneNumnerEquals !== null) {
            queryParameters = queryParameters.set('phoneNumner.equals', <any>PhoneNumnerEquals);
        }
        if (PhoneNumnerIn) {
            PhoneNumnerIn.forEach((element) => {
                queryParameters = queryParameters.append('phoneNumner.in', <any>element);
            })
        }
        if (PhoneNumnerSpecified !== undefined && PhoneNumnerSpecified !== null) {
            queryParameters = queryParameters.set('phoneNumner.specified', <any>PhoneNumnerSpecified);
        }
        if (Size !== undefined && Size !== null) {
            queryParameters = queryParameters.set('size', <any>Size);
        }
        if (Sort) {
            Sort.forEach((element) => {
                queryParameters = queryParameters.append('sort', <any>element);
            })
        }
        if (SortSorted !== undefined && SortSorted !== null) {
            queryParameters = queryParameters.set('sort.sorted', <any>SortSorted);
        }
        if (SortUnsorted !== undefined && SortUnsorted !== null) {
            queryParameters = queryParameters.set('sort.unsorted', <any>SortUnsorted);
        }
        if (Unpaged !== undefined && Unpaged !== null) {
            queryParameters = queryParameters.set('unpaged', <any>Unpaged);
        }
        if (UrlContains !== undefined && UrlContains !== null) {
            queryParameters = queryParameters.set('url.contains', <any>UrlContains);
        }
        if (UrlEquals !== undefined && UrlEquals !== null) {
            queryParameters = queryParameters.set('url.equals', <any>UrlEquals);
        }
        if (UrlIn) {
            UrlIn.forEach((element) => {
                queryParameters = queryParameters.append('url.in', <any>element);
            })
        }
        if (UrlSpecified !== undefined && UrlSpecified !== null) {
            queryParameters = queryParameters.set('url.specified', <any>UrlSpecified);
        }
        if (UuidContains !== undefined && UuidContains !== null) {
            queryParameters = queryParameters.set('uuid.contains', <any>UuidContains);
        }
        if (UuidEquals !== undefined && UuidEquals !== null) {
            queryParameters = queryParameters.set('uuid.equals', <any>UuidEquals);
        }
        if (UuidIn) {
            UuidIn.forEach((element) => {
                queryParameters = queryParameters.append('uuid.in', <any>element);
            })
        }
        if (UuidSpecified !== undefined && UuidSpecified !== null) {
            queryParameters = queryParameters.set('uuid.specified', <any>UuidSpecified);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OrganisationUnit>>(`${this.basePath}/api/organisation-units`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getOrganisationUnit
     * 
     * @param Id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrganisationUnitUsingGET(Id: number, observe?: 'body', reportProgress?: boolean): Observable<OrganisationUnit>;
    public getOrganisationUnitUsingGET(Id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganisationUnit>>;
    public getOrganisationUnitUsingGET(Id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganisationUnit>>;
    public getOrganisationUnitUsingGET(Id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Id === null || Id === undefined) {
            throw new Error('Required parameter Id was null or undefined when calling getOrganisationUnitUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<OrganisationUnit>(`${this.basePath}/api/organisation-units/${encodeURIComponent(String(Id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateOrganisationUnit
     * 
     * @param OrganisationUnit organisationUnit
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateOrganisationUnitUsingPUT(OrganisationUnit: OrganisationUnit, observe?: 'body', reportProgress?: boolean): Observable<OrganisationUnit>;
    public updateOrganisationUnitUsingPUT(OrganisationUnit: OrganisationUnit, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganisationUnit>>;
    public updateOrganisationUnitUsingPUT(OrganisationUnit: OrganisationUnit, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganisationUnit>>;
    public updateOrganisationUnitUsingPUT(OrganisationUnit: OrganisationUnit, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (OrganisationUnit === null || OrganisationUnit === undefined) {
            throw new Error('Required parameter OrganisationUnit was null or undefined when calling updateOrganisationUnitUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<OrganisationUnit>(`${this.basePath}/api/organisation-units`,
            OrganisationUnit,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
